bundle common inventory_control
# @brief Inventory control bundle
#
# This common bundle is for controlling whether some inventory bundles
# are disabled.
{
  classes:
      "disable_inventory" expression => "!any";
      # disable specific inventory modules here
      "disable_lsb" expression => "disable_inventory";

      # by default don't run dmidecode every time
      "disable_dmidecode" expression => "any";
      # or you could make it conditional on the binary...
      # "disable_dmidecode" expression => fileexists("/usr/sbin/dmidecode");

  reports:
    verbose_mode.disable_inventory::
      "$(this.bundle): All inventory modules disabled";
    verbose_mode.!disable_lsb::
      "$(this.bundle): LSB module enabled";
    verbose_mode.!disable_dmidecode::
      "$(this.bundle): LSB module enabled";
}

bundle common inventory_any
# @brief Do inventory for any OS
#
# This common bundle is for any OS work not handled by specific
# bundles.
{
}

bundle common inventory_dmidecode
# @brief Do dmidecode-based inventory
#
# This common bundle runs dmidecode
{
  vars:
    !disable_dmidecode::
      "dmivars" slist => {
                           "bios-vendor",
                           "bios-version",
                           "bios-release-date",
                           "system-manufacturer",
                           "system-product-name",
                           "system-version",
                           "system-serial-number",
                           "system-uuid",
                           "baseboard-manufacturer",
                           "baseboard-product-name",
                           "baseboard-version",
                           "baseboard-serial-number",
                           "baseboard-asset-tag",
                           "chassis-manufacturer",
                           "chassis-type",
                           "chassis-version",
                           "chassis-serial-number",
                           "chassis-asset-tag",
                           "processor-family",
                           "processor-manufacturer",
                           "processor-version",
                           "processor-frequency"
      };
      "decoder" string => "/usr/sbin/dmidecode";
      "dmi[$(dmivars)]" string => execresult("$(decoder) -s $(dmivars)",
                                                 "useshell"),
      meta => { "inventory", "group=OS", "comment=$(dmivars) $(dmi[$(dmivars)])" };

      "canonified_var[$(dmivars)]" string => canonify($(dmivars));
      "canonified[$(dmivars)]" string => canonify("$(dmi[$(dmivars)])");

  classes:
    !disable_dmidecode::
      "dmidecode_$(canonified_var[$(dmivars)])_$(canonified[$(dmivars)])"
      expression => "any",
      meta => { "inventory",
                "group=OS",
                "derived-from=inventory_dmidecode.dmi[$(dmivars)]",
                "comment=$(dmivars) $(dmi[$(dmivars)])"
      };
}
