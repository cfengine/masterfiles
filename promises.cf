###############################################################################
#
#   promises.cf - Basic Policy for CFEngine
#
###############################################################################

body common control

{

      bundlesequence => {
			  # Common bundle first (Best Practice)
                          @(inventory.bundles),
			  "def",
                          "cfe_internal_hub_vars",
			  # Design Center
			  "cfsketch_run",

                          # Agent bundle
                          "cfe_internal_management",   # See cfe_internal/CFE_cfengine.cf
                          "service_catalogue",
                          "example_use_goals",         # See cfe_internal/example_use_goals.cf

      };

      inputs => {
                  @(inventory.inputs),

                  # File definition for global variables and classes
		  "def.cf",

                  # Design Center
                  # MARKER FOR CF-SKETCH INPUT INSERTION
                  "sketches/meta/api-runfile.cf",
                  @(cfsketch_g.inputs),

                  # CFEngine internal processes for Mission Portal mostly
                  "cfe_internal/CFE_cfengine.cf",
                  "cfe_internal/CFE_hub_specific.cf",
                  "cfe_internal/CFE_knowledge.cf",
                  "cfe_internal/example_use_goals.cf",

		  # Control body for all CFEngine robot agents
		  "controls/cf_agent.cf",
		  "controls/cf_execd.cf",
		  "controls/cf_hub.cf",
		  "controls/cf_monitord.cf",
		  "controls/cf_runagent.cf",
		  "controls/cf_serverd.cf",

		  # COPBL/Custom libraries.  Eventually this should use wildcards.
		  @(cfengine_stdlib.inputs),

                  # Add update files to build Knowledge Map relationship
                  "update/update_bins.cf",
                  "update/update_masterfiles_internal.cf",
                  "update/update_policy.cf",
                  "update/update_processes.cf",

                  # List of services here
		  "services/init_msg.cf",
                  "services/file_change.cf",

      };

      version => "CFEngine Promises.cf 3.6.0";

      #   goal_categories => { "goals", "targets", "milestones" };
      #   goal_patterns   => { "goal_.*", "target.*","milestone.*" };
}

bundle common inventory
# @brief Set up inventory inputs
#
# This bundle creates the inputs for inventory bundles.
#
# Inventory bundles are simply common bundles loaded before anything
# else in promises.cf
{
  vars:
      # This list is intended to grow as needed
    debian::
      "inputs" slist => { "inventory/any.cf", "inventory/lsb.cf", "inventory/debian.cf" };
      "bundles" slist => { "inventory_control", "inventory_any", "inventory_lsb", "inventory_debian" };
    redhat::
      "inputs" slist => { "inventory/any.cf", "inventory/lsb.cf", "inventory/redhat.cf" };
      "bundles" slist => { "inventory_control", "inventory_any", "inventory_lsb", "inventory_redhat" };
    windows::
      "inputs" slist => { "inventory/any.cf", "inventory/windows.cf" };
      "bundles" slist => { "inventory_control", "inventory_any", "inventory_windows" };
    macos::
      "inputs" slist => { "inventory/any.cf", "inventory/macos.cf" };
      "bundles" slist => { "inventory_control", "inventory_any", "inventory_macos" };
    !windows.!macos.!debian.!redhat::
      "inputs" slist => { "inventory/any.cf", "inventory/lsb.cf", "inventory/generic.cf" };
      "bundles" slist => { "inventory_control", "inventory_any", "inventory_lsb", "inventory_generic" };

  reports:
    verbose_mode::
      "$(this.bundle): loading inventory module '$(inputs)'";
}

bundle common cfengine_stdlib
{
  vars:
    cfengine_3_4::
      "inputs" slist => { "libraries/cfengine_stdlib.cf" };
    cfengine_3_5::
      "inputs" slist => {
                          "lib/3.5/paths.cf",
                          "lib/3.5/common.cf",
                          "lib/3.5/commands.cf",
                          "lib/3.5/packages.cf",
                          "lib/3.5/files.cf",
                          "lib/3.5/services.cf",
                          "lib/3.5/processes.cf",
                          "lib/3.5/storage.cf",
                          "lib/3.5/databases.cf",
                          "lib/3.5/monitor.cf",
                          "lib/3.5/guest_environments.cf",
                          "lib/3.5/bundles.cf",
      };

    !(cfengine_3_4||cfengine_3_5)::
      "inputs" slist => {
                          "$(sys.local_libdir)/paths.cf",
                          "$(sys.local_libdir)/common.cf",
                          "$(sys.local_libdir)/commands.cf",
                          "$(sys.local_libdir)/packages.cf",
                          "$(sys.local_libdir)/files.cf",
                          "$(sys.local_libdir)/services.cf",
                          "$(sys.local_libdir)/processes.cf",
                          "$(sys.local_libdir)/storage.cf",
                          "$(sys.local_libdir)/databases.cf",
                          "$(sys.local_libdir)/monitor.cf",
                          "$(sys.local_libdir)/guest_environments.cf",
                          "$(sys.local_libdir)/bundles.cf",
      };

  reports:
    verbose_mode::
      "$(this.bundle): defining inputs='$(inputs)'";
}

###############################################################################
#
# bundle agent service_catalogue
#  - general purposes of usage
#
###############################################################################

bundle agent service_catalogue

{

  methods:

    any::

      "security" -> { goal_infosec, goal_compliance }
      comment => "Basic change management",
      handle => "service_catalogue_change_management",
      usebundle => change_management;

      "INIT MSG" usebundle => init_msg,
      comment => "Just a pre-defined policy bundled with the package",
      handle => "main_methods_any_init_msg";

}
