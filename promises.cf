###############################################################################
#
#   promises.cf - Basic Policy for CFEngine
#
###############################################################################

body common control

{

      bundlesequence => {
                        # Common bundle first (Best Practice)
                          inventory_control,
                          @(inventory.bundles),
                          def,
                          cfe_internal_hub_vars,

                         # Design Center
                          cfsketch_run,

                         # Agent bundle
                          cfe_internal_management,   # See cfe_internal/CFE_cfengine.cf
                          service_catalogue,

      };

      inputs => {
                 # File definition for global variables and classes
                  "def.cf",

                # Inventory policy
                  @(inventory.inputs),

                 # Design Center
                  "sketches/meta/api-runfile.cf",
                  @(cfsketch_g.inputs),

                 # CFEngine internal processes for Mission Portal mostly
                  "cfe_internal/CFE_cfengine.cf",
                  "cfe_internal/CFE_hub_specific.cf",
                  "cfe_internal/CFE_knowledge.cf",

                 # Control body for all CFEngine robot agents
                  @(cfengine_controls.inputs),

                 # COPBL/Custom libraries.  Eventually this should use wildcards.
                  @(cfengine_stdlib.inputs),

                 # Reports
                  @(cfengine_reports.inputs),

                 # Add update files to build Knowledge Map relationship
                  "update/update_bins.cf",
                  "update/cfe_internal_dc_workflow.cf",
                  "update/cfe_internal_local_git_remote.cf",
                  "update/cfe_internal_update_from_repository.cf",
                  "update/update_policy.cf",
                  "update/update_processes.cf",

                # List of services here
                  "services/init_msg.cf",
                  "services/file_change.cf",

      };

      version => "CFEngine Promises.cf 3.6.0";

      #   goal_categories => { "goals", "targets", "milestones" };
      #   goal_patterns   => { "goal_.*", "target.*","milestone.*" };
}

      #

bundle common inventory
# @brief Set up inventory inputs
#
# This bundle creates the inputs for inventory bundles.
#
# Inventory bundles are simply common bundles loaded before anything
# else in promises.cf
#
# Tested to work properly against 3.5.x
{
  classes:
      "cfengine_latest" expression => "!(cfengine_3_4|cfengine_3_5)";
      "cfengine_legacy" expression => "(cfengine_3_4|cfengine_3_5)";

  vars:
      # This list is intended to grow as needed #
      ###########################################

      # inputs and bundles common to all systems
    cfengine_latest.any::
      "inputs" slist => { "inventory/any.cf" };
      "bundles" slist => { "inventory_control", "inventory_any", "inventory_autorun" };

      # linux-based systems; cascade down the class chain.
      # redefine inputs and bundles from least specific until most specific definition.
    cfengine_latest.linux::
      "inputs" slist => { @(inputs), "inventory/lsb.cf", "inventory/linux.cf" };
      "bundles" slist => { @(bundles), "inventory_lsb", "inventory_linux" };
    cfengine_latest.debian::
      "inputs" slist => { @(inputs), "inventory/debian.cf" };
      "bundles" slist => { @(bundles), "inventory_debian" };
    cfengine_latest.redhat::
      "inputs" slist => { @(inputs), "inventory/redhat.cf" };
      "bundles" slist => { @(bundles), "inventory_redhat" };
    cfengine_latest.SUSE::
      "inputs" slist => { @(inputs), "inventory/suse.cf" };
      "bundles" slist => { @(bundles), "inventory_suse" };

    cfengine_latest.windows::
      "inputs" slist => { @(inputs), "inventory/windows.cf" };
      "bundles" slist => { @(bundles), "inventory_windows" };
    cfengine_latest.macos::
      "inputs" slist => { @(inputs), "inventory/macos.cf" };
      "bundles" slist => { @(bundles), "inventory_macos" };
    cfengine_latest.!linux.!windows.!macos::
      "inputs" slist => { @(inputs), "inventory/generic.cf" };
      "bundles" slist => { @(bundles), "inventory_generic" };

    cfengine_legacy::
      "inputs" slist => { cf_null };
      "bundles" slist => { cf_null };

  reports:
    verbose_mode::
      "$(this.bundle): loading inventory module '$(inputs)'";
}

      #

bundle common cfengine_stdlib
{
  vars:
    cfengine_3_4::
      # This is the standard library for CFEngine 3.4 and earlier
      # (only 3.4 is explicitly supported)
      "inputs" slist => { "libraries/cfengine_stdlib.cf" };
    cfengine_3_5::
      # 3.5 doesn't have "body file control" so all the includes are listed here
      "inputs" slist => {
                          "lib/3.5/paths.cf",
                          "lib/3.5/common.cf",
                          "lib/3.5/commands.cf",
                          "lib/3.5/packages.cf",
                          "lib/3.5/files.cf",
                          "lib/3.5/services.cf",
                          "lib/3.5/processes.cf",
                          "lib/3.5/storage.cf",
                          "lib/3.5/databases.cf",
                          "lib/3.5/monitor.cf",
                          "lib/3.5/guest_environments.cf",
                          "lib/3.5/bundles.cf",
                          "lib/3.5/reports.cf",
                          "lib/3.5/cfe_internal.cf",
      };

    !(cfengine_3_4|cfengine_3_5)::
      # CFEngine 3.6 and higher can include through a secondary file
      "inputs" slist => { "$(sys.local_libdir)/stdlib.cf" };

  reports:
    verbose_mode::
      "$(this.bundle): defining inputs='$(inputs)'";
}

      #

bundle common cfengine_controls
{
  vars:
    cfengine_3_4::
      # This is control body for CFEngine 3.4 and earlier
      # server control seems to be a bit problem here
      # (only 3.4 is explicitly supported)
      "inputs" slist => {
                          "controls/cf_agent.cf",
                          "controls/cf_execd.cf",
                          "controls/cf_hub.cf",
                          "controls/cf_monitord.cf",
                          "controls/cf_runagent.cf",
                          "controls/3.4/cf_serverd.cf",
      };

    !cfengine_3_4::
      # 3.5 and higher are fine with a standard version
      "inputs" slist => {
                          "controls/cf_agent.cf",
                          "controls/cf_execd.cf",
                          "controls/cf_hub.cf",
                          "controls/cf_monitord.cf",
                          "controls/cf_runagent.cf",
                          "controls/cf_serverd.cf",
      };

  reports:
    verbose_mode::
      "$(this.bundle): defining inputs='$(inputs)'";
}

bundle common cfengine_reports
{
  vars:
    (cfengine_3_4|cfengine_3_5)::
      "inputs" slist => { cf_null };

    !(cfengine_3_4|cfengine_3_5)::
      "inputs" slist => {
                          "cfe_internal/host_info_report.cf",
      };

  reports:
    verbose_mode::
      "$(this.bundle): defining inputs='$(inputs)'";
}
###############################################################################
#
# bundle agent service_catalogue
#  - general purposes of usage
#
###############################################################################

bundle agent service_catalogue

{

  methods:

    any::

      "security" -> { goal_infosec, goal_compliance }
      comment => "Basic change management",
      handle => "service_catalogue_change_management",
      usebundle => change_management;

      "INIT MSG" usebundle => init_msg,
      comment => "Just a pre-defined policy bundled with the package",
      handle => "main_methods_any_init_msg";

}
