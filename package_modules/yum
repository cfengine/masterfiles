#!/usr/bin/python

import sys
import os
import subprocess
import re


rpm_cmd = os.environ.get('CFENGINE_TEST_RPM_CMD', "/bin/rpm")
rpm_output_format = "Name=%{name}\nVersion=%{version}\nArchitecture=%{arch}\n"

yum_cmd = os.environ.get('CFENGINE_TEST_YUM_CMD', "/usr/bin/yum")
yum_options = "--quiet"

def get_package_data():
    pkg_string = ""
    for line in sys.stdin:
        if line.startswith("File="):
            pkg_string = line.split("=", 1)[1].rstrip()
            # Don't break, we need to exhaust stdin.

    if not pkg_string:
        return 1

    if pkg_string.startswith("/"):
        # Absolute file.
        sys.stdout.write("PackageType=file\n")
        sys.stdout.flush()
        return subprocess.call([rpm_cmd, "--qf", rpm_output_format, "-qp", result.group(1)])
    elif re.search("([:,]|-[0-9])", pkg_string):
        # Contains either a version number or an illegal symbol.
        sys.stdout.write(line + "ErrorMessage: Package string with illegal format\n")
        return 1
    else:
        sys.stdout.write("PackageType=repo\n")
        sys.stdout.write("Name=" + pkg_string + "\n")
        return 0


def list_installed():
    # Ignore everything.
    sys.stdin.readlines()

    return subprocess.call([rpm_cmd, "-qa", "--qf", rpm_output_format])


def list_updates(online):
    # Ignore everything.
    sys.stdin.readlines()

    online_flag = [] if online else ["-C"]

    process = subprocess.Popen([yum_cmd, yum_options] + online_flag + ["check-update"], stdout=subprocess.PIPE)
    lastline = ""
    for line in process.stdout:
        # Combine multiline entries into one line. A line without at least three
        # space separated fields gets combined with the next line, if that line
        # starts with a space.
        if lastline and not line[0].isspace():
            # Line does not start with a space. No combination.
            lastline = ""

        line = lastline + line
        match = re.match("^\S+\s+\S+\s+\S+", line)
        if match is None:
            # Keep line but strip trailing newline.
            lastline = line[:-1]
            continue

        lastline = ""
        match = re.match("^(?P<name>\S+)\.(?P<arch>[^.\s]+)\s+(?P<version>\S+)\s+\S+\s*$", line)
        if match is not None:
            sys.stdout.write("Name=" + match.group("name") + "\n")
            sys.stdout.write("Version=" + match.group("version") + "\n")
            sys.stdout.write("Architecture=" + match.group("arch") + "\n")

    return 0


def package_arguments_builder():
    name = ""
    version = ""
    arch = ""
    args = []
    for line in sys.stdin:
        if line.startswith("Name="):
            if name:
                # Each new "Name=" triggers a new entry.
                args_add = name
                if version:
                    args_add += "-" + version
                if arch:
                    args_add += ":" + arch
                args.append(args_add)

                version = ""
                arch = ""

            name = line.split("=", 1)[1].rstrip()

        elif line.startswith("Version="):
            version = line.split("=", 1)[1].rstrip()

        elif line.startswith("Architecture="):
            arch = line.split("=", 1)[1].rstrip()

    if name:
        return args

    args_add = name
    if version:
        args_add += "-" + version
    if arch:
        args_add += ":" + arch
    args.append(args_add)

    return args


def repo_install():
    cmd_line = [yum_cmd, yum_options, "install"]

    args = package_arguments_builder()

    if args:
        return subprocess.call(cmd_line + args, stdout=sys.stderr)
    return 0


def remove():
    cmd_line = [rpm_cmd, "-e"]

    args = package_arguments_builder()

    if args:
        return subprocess.call(cmd_line + args, stdout=sys.stderr)
    return 0


def file_install():
    cmd_line = [rpm_cmd, "-U"]
    found = False
    for line in sys.stdin:
        if line.startswith("File="):
            found = True
            cmd_line.append(line.split("=", 1)[1].rstrip())

    if not found:
        return 0

    return subprocess.call(cmd_line, stdout=sys.stderr)


def main():
    if len(sys.argv) < 2:
        sys.stderr.write("Need to provide argument\n")
        return 2

    elif sys.argv[1] == "supports-api-version":
        sys.stdout.write("1\n")
        return 0

    elif sys.argv[1] == "get-package-data":
        return get_package_data()

    elif sys.argv[1] == "list-installed":
        return list_installed()

    elif sys.argv[1] == "list-updates":
        return list_updates(True)

    elif sys.argv[1] == "list-updates-local":
        return list_updates(False)

    elif sys.argv[1] == "repo-install":
        return repo_install()

    elif sys.argv[1] == "remove":
        return remove()

    elif sys.argv[1] == "file-install":
        return file_install()

    else:
        sys.stderr.write("Invalid operation\n")
        return 2

sys.exit(main())
