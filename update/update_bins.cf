################################################################################
#
# DO NOT EDIT THIS FILE. All policy files prefixed with CFE_ and update_bins.cf
# are maintained by CFEngine and its original state is required for internal
# operations of CFEngine. If the file has been modified CFEngineâ€™s upgrades
# may require manual intervention. Contact CFEngine support if additional
# information and/or recommendation is needed.
#
################################################################################
################################################################################
#
# update_bins
#  - CFEngine binary update (native packages)
#
################################################################################

bundle agent cfe_internal_update_bins

{

  vars:

      "cf_components"       slist => { "cf-key", "cf-monitord", "cf-promises",
                                       "cf-runagent", "cf-serverd", "cf-hub", },
      comment => "Define cfengine robot agents",
      handle => "cfe_internal_update_bins_vars_cf_components";

      "master_software_location"  string => "/var/cfengine/master_software_updates",
      comment => "The Cfengine binary updates directory on the policy host",
      handle => "cfe_internal_update_bins_vars_master_software_location";

      "local_software_dir"        string => translatepath("$(sys.workdir)/software_updates/$(sys.flavour)_$(sys.arch)"),
      comment => "Local directory containing binary updates for this host",
      handle => "cfe_internal_update_bins_vars_local_software_dir";

      "local_update_log_dir"      string => translatepath("$(sys.workdir)/software_updates/update_log"),
      comment => "Local directory to store update log for this host",
      handle => "cfe_internal_update_bins_vars_local_update_log_dir";

    windows::

      "stop_signal"              string => "kill",
      comment => "Define a stop signal for Windows",
      handle => "cfe_internal_update_bins_vars_stop_signal_windows";

    !windows::

      "stop_signal"              string => "term",
      comment => "Define a stop signal for *NIX system",
      handle => "cfe_internal_update_bins_vars_stop_signal_unix";

    solarisx86|solaris::

      "novapkg"                 string => "CFEcfengine-nova",
      comment => "Name convention of Nova package on Solaris",
      handle => "cfe_internal_update_bins_vars_novapkg_solaris",
      ifvarclass => "nova_edition";

    aix::

      "novapkg"                 string => "cfengine.cfengine-nova",
      comment => "Name convention of Nova package on AIX",
      handle => "cfe_internal_update_bins_vars_novapkg_aix",
      ifvarclass => "nova_edition";

    !(solarisx86|solaris|aix)::

      "novapkg"                 string => "cfengine-nova",
      comment => "Name convention of Nova package for all but not Solaris",
      handle => "cfe_internal_update_bins_vars_novapkg_not_solaris_aix",
      ifvarclass => "nova_edition";

    solaris.!sunos_i86pc::

      "pkgarch"                 string => "sparc",
      comment => "Name convention of package arch on Solaris",
      handle => "cfe_internal_update_bins_vars_pkgarch_solaris";

    solarisx86::

      "pkgarch"                 string => "i386",
      comment => "Name convention of package arch on Solaris",
      handle => "cfe_internal_update_bins_vars_pkgarch_solarisx86";

    redhat.i686::

      "pkgarch"                 string => "i386",
      comment => "Name convention of package arch on 32-bit RHEL",
      handle => "cfe_internal_update_bins_vars_pkgarch_redhat_32b";

    redhat.x86_64::

      "pkgarch"                 string => "$(sys.arch)",
      comment => "Name convention of package arch on 64-bit RHEL",
      handle => "cfe_internal_update_bins_vars_pkgarch_redhat_64b";

    freebsd|netbsd|debian|aix::

      "pkgarch"                 string => "*",
      comment => "Name convention of package arch on *BSD/Debian",
      handle => "cfe_internal_update_bins_vars_pkgarch_bsd_debian_aix";

    !(solarisx86|solaris|freebsd|netbsd|debian|aix|redhat)::

      "pkgarch"                 string => "$(sys.arch)",
      comment => "Name convention of package arch for other system except Solaris and *BSD",
      handle => "cfe_internal_update_bins_vars_pkgarch_not_solaris_bsd_debian_aix_redhat_32b";

      #

  processes:

    bin_newpkg::

      "$(cf_components)" signals => { "$(stop_signal)" },
      comment => "Stop cfengine running processes before binary update",
      handle => "cfe_internal_update_bins_processes_stop_cfengine",
      classes => u_if_repaired("stopped_cfprocs");

    bin_newpkg.!windows::

      "cf-execd"  signals => { "$(stop_signal)" },
      comment => "Stop cf-execd running process before binary update",
      handle => "cfe_internal_update_bins_processes_stop_cf_execd",
      classes => u_if_repaired("stopped_cfprocs");

      #

  packages:

      # update packages after all CFEngine have been killed

    stopped_cfprocs.!windows::

      "$(novapkg)"
      comment => "Update Nova package to a newer version",
      handle => "cfe_internal_update_bins_packages_nova_update_not_windows",
      package_policy => "update",
      package_select => ">=",            # picks the newest Nova available
      package_architectures => { "$(pkgarch)" },
      package_version => "9.9.9",         # Install new Nova anyway
      package_method => u_generic( "$(local_software_dir)" ),
      ifvarclass => "nova_edition",
      classes => u_if_else("bin_update_success", "bin_update_fail");

    stopped_cfprocs.windows::

      "$(novapkg)"
      comment => "Update Nova package to a newer version",
      handle => "cfe_internal_update_bins_packages_nova_update_windows_only",
      package_policy => "update",
      package_select => ">=",            # picks the newest Nova available
      package_architectures => { "$(pkgarch)" },
      package_version => "9.9.9.9",       # Install new Nova anyway
      package_method => u_generic( "$(local_software_dir)" ),
      ifvarclass => "nova_edition",
      classes => u_if_else("bin_update_success", "bin_update_fail");

    !am_policy_hub.!windows::

      "$(novapkg)"
      comment => "Update Nova package to a newer version (package is there)",
      handle => "cfe_internal_update_bins_packages_nova_update_not_windows_pkg_there",
      package_policy => "update",
      package_select => ">=",            # picks the newest Nova available
      package_architectures => { "$(pkgarch)" },
      package_version => "9.9.9",         # Install new Nova anyway
      package_method => u_generic( "$(local_software_dir)" ),
      ifvarclass => "nova_edition",
      classes => u_if_else("bin_update_success", "bin_update_fail");

    !am_policy_hub.windows::

      "$(novapkg)"
      comment => "Update Nova package to a newer version (package is there)",
      handle => "cfe_internal_update_bins_packages_nova_update_windows_only_pkg_there",
      package_policy => "update",
      package_select => ">=",            # picks the newest Nova available
      package_architectures => { "$(pkgarch)" },
      package_version => "9.9.9.9",       # Install new Nova anyway
      package_method => u_generic( "$(local_software_dir)" ),
      ifvarclass => "nova_edition",
      classes => u_if_else("bin_update_success", "bin_update_fail");

      #

  files:

    any::

      "$(local_update_log_dir)/$(sys.nova_version)_is_running"
      comment => "Create an empty file about a version that is running",
      handle => "cfe_internal_update_bins_files_version_is_running",
      create => "true";

    !am_policy_hub::

      "$(local_software_dir)"
      comment => "Copy binary updates from master source on policy server",
      handle => "cfe_internal_update_bins_files_pkg_copy",
      copy_from => u_pcp("$(master_software_location)/$(sys.flavour)_$(sys.arch)","$(sys.policy_hub)"),
      depth_search => u_recurse("1"),  # Nova updates should be in root dir
      action => u_immediate,
      classes => u_if_repaired("bin_newpkg");

    bin_update_success::

      "$(local_update_log_dir)/upgraded_binary_from_$(sys.nova_version)"
      comment => "Create an empty file after successfully upgrade the binary",
      handle => "cfe_internal_update_bins_files_update_from_log",
      create => "true";

      #

  services:

    bin_newpkg.windows::

      "CfengineNovaExec"
      service_policy => "stop",
      comment => "Stop the executor windows service before updating Cfengine",
      handle => "cfe_internal_update_bins_services_stop_cf_execd_windows",
      classes => u_if_repaired("stopped_cfprocs");

      #

  reports:

    bin_newpkg::

      "An update for Cfengine binaries is downloaded, installing..."
      comment => "Alert a message during installation",
      handle => "cfe_internal_update_bins_reports_installation";

    bin_update_success::

      "Successfully installed Cfengine binaries"
      comment => "Alert a message when an update finishes",
      handle => "cfe_internal_update_bins_reports_finish";

    bin_update_fail::

      "Failed updating Cfengine binaries, should revert to old version"
      comment => "Alert a message if an update failed",
      handle => "cfe_internal_update_bins_reports_fail";

}

################################################################################

body copy_from u_pcp(from,server)
{
      source      => "$(from)";
      compare     => "digest";
      trustkey    => "false";
      purge       => "true";

    !am_policy_hub::

      servers => { "$(server)" };
}

################################################################################

bundle common u_common_knowledge
# @brief standalone common packages knowledge bundle
#
# This common bundle defines general things about platforms.
# @see common_knowledge
{
  vars:
      "list_update_ifelapsed_now" string => "0";
}

body package_method u_generic(repo)
{

    debian::

      package_changes => "individual";
      package_list_command => "/usr/bin/dpkg -l";

      # package_list_update_command => "/usr/bin/apt-get update";
      package_list_update_ifelapsed => "$(u_common_knowledge.list_update_ifelapsed_now)";

      package_list_name_regex    => "ii\s+([^\s:]+).*";
      # package_list_version_regex => "ii\s+[^\s]+\s+([^\s]+).*";
      package_list_version_regex => "ii\s+[^\s]+\s+(\d+\.\d+((\.|-)\d+)+).*";

      package_installed_regex    => ".*"; # all reported are installed

      package_file_repositories  => { "$(repo)" };

    debian.x86_64::
      package_name_convention    => "$(name)_$(version)_x86_64.deb";

    debian.i686::
      package_name_convention    => "$(name)_$(version)_i386.deb";

    debian::
      package_add_command        => "/usr/bin/dpkg --force-confdef --force-confnew --install";
      package_delete_command     => "/usr/bin/dpkg --purge";
      package_update_command     => "/usr/bin/dpkg --force-confdef --force-confnew --install";


    redhat|SuSE::

      package_changes => "individual";

      package_list_command => "/bin/rpm -qa --queryformat \"i | repos | %{name} | %{version}-%{release} | %{arch}\n\"";

      package_list_update_ifelapsed => "$(u_common_knowledge.list_update_ifelapsed_now)";

      package_list_name_regex    => "[^|]+\|[^|]+\|\s+([^\s|]+).*";
      package_list_version_regex => "[^|]+\|[^|]+\|[^|]+\|\s+([^\s|]+).*";
      package_list_arch_regex    => "[^|]+\|[^|]+\|[^|]+\|[^|]+\|\s+([^\s]+).*";

      package_installed_regex    => "i.*";

      package_file_repositories  => { "$(repo)" };

      package_name_convention    => "$(name)-$(version).$(arch).rpm";

      package_add_command        => "/bin/rpm -ivh ";
      package_delete_command     => "/bin/rpm -e --nodeps";
      package_verify_command     => "/bin/rpm -V";
      package_update_command     => "/bin/rpm -Uvh ";
      package_noverify_regex     => ".*[^\s].*";

    redhat::
      package_list_update_command => "/usr/bin/yum --quiet check-update";
    SuSE::
      package_list_update_command => "/usr/bin/zypper list-updates";

    windows::

      package_changes => "individual";
      package_list_update_ifelapsed => "$(u_common_knowledge.list_update_ifelapsed_now)";
      package_file_repositories  => { "$(repo)" };

      package_installed_regex    => ".*";

      package_name_convention    => "$(name)-$(version)-$(arch).msi";

      package_add_command        => "\"$(sys.winsysdir)\msiexec.exe\" /qn /i";
      package_update_command     => "\"$(sys.winsysdir)\msiexec.exe\" /qn /i";
      package_delete_command     => "\"$(sys.winsysdir)\msiexec.exe\" /qn /x";


    freebsd::

      package_changes => "individual";

      package_list_command => "/usr/sbin/pkg_info";

      package_list_update_command => "/usr/bin/true";
      package_list_update_ifelapsed => "$(u_common_knowledge.list_update_ifelapsed_now)";


      package_list_name_regex    => "^(\S+)-(\d+\.?)+";
      package_list_version_regex => "^\S+-((\d+\.?)+\_\d)";

      package_file_repositories  => { "$(repo)" };

      package_installed_regex    => ".*";

      package_name_convention    => "$(name)-$(version).tbz";
      package_delete_convention  => "$(name)-$(version)";

      package_add_command        => "/usr/sbin/pkg_add";
      package_delete_command     => "/usr/sbin/pkg_delete";

    netbsd::

      package_changes => "individual";

      package_list_command => "/usr/sbin/pkg_info";

      package_list_update_command => "/usr/bin/true";
      package_list_update_ifelapsed => "$(u_common_knowledge.list_update_ifelapsed_now)";


      package_list_name_regex    => "^(\S+)-(\d+\.?)+";
      package_list_version_regex => "^\S+-((\d+\.?)+\nb\d)";

      package_file_repositories  => { "$(repo)" };

      package_installed_regex    => ".*";

      package_name_convention    => "$(name)-$(version).tgz";
      package_delete_convention  => "$(name)-$(version)";

      package_add_command        => "/usr/sbin/pkg_add";
      package_delete_command     => "/usr/sbin/pkg_delete";

    solarisx86|solaris::

      package_changes => "individual";
      package_list_command => "/usr/bin/pkginfo -l";
      package_list_update_command => "/usr/bin/true";
      package_list_update_ifelapsed => "$(u_common_knowledge.list_update_ifelapsed_now)";

      package_multiline_start    => "\s*PKGINST:\s+[^\s]+";
      package_list_name_regex    => "\s*PKGINST:\s+([^\s]+)";
      package_list_version_regex => "\s*VERSION:\s+([^\s]+)";
      package_list_arch_regex    => "\s*ARCH:\s+([^\s]+)";

      package_file_repositories  => { "$(repo)" };

      package_installed_regex    => "\s*STATUS:\s*(completely|partially)\s+installed.*";
      package_name_convention    => "$(name)-$(version)-$(arch).pkg";
      package_delete_convention  => "$(name)";

      # Cfengine appends path to package and package name below, respectively
      package_add_command        => "/bin/sh $(repo)/add_scr $(repo)/admin_file";
      package_delete_command     => "/usr/sbin/pkgrm -n -a $(repo)/admin_file";

    aix::

      package_changes => "individual";

      package_list_update_command => "/usr/bin/true";
      package_list_update_ifelapsed => "$(u_common_knowledge.list_update_ifelapsed_now)";

      package_list_command       => "/usr/bin/lslpp -lc";
      package_list_name_regex    => "[^:]+:([^:]+):[^:]+:.*";
      package_list_version_regex => "[^:]+:[^:]+:([^:]+):.*";

      package_file_repositories  => { "$(repo)" };

      package_installed_regex    => "[^:]+:[^:]+:[^:]+:[^:]*:(COMMITTED|APPLIED):.*";

      package_name_convention    => "$(name)-$(version).bff";
      package_delete_convention  => "$(name)";

      package_add_command        => "/usr/bin/rm -f $(repo)/.toc && /usr/sbin/geninstall -IqacgXNY -d $(repo) cfengine.cfengine-nova$";
      package_update_command     => "/usr/bin/rm -f $(repo)/.toc && /usr/sbin/geninstall -IqacgXNY -d $(repo) cfengine.cfengine-nova$";

      # package_add_command        => "/bin/sh -c /usr/sbin/inutoc $(repo) && /usr/sbin/installp -qacgXNYd $(repo) cfengine.cfengine-nova$";
      # package_update_command     => "/bin/sh -c /usr/sbin/inutoc $(repo) && /usr/sbin/installp -qacgXNYd $(repo) cfengine.cfengine-nova$";

      package_delete_command     => "/usr/sbin/installp -ug cfengine.cfengine-nova$";

}
