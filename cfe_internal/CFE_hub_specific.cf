##################################################################
#
# DO NOT EDIT THIS FILE. All policy files prefixed with CFE_ are maintained
# by CFEngine and its original state is required for internal operations of
# CFEngine. If the file has been modified CFEngineâ€™s upgrades may require
# manual intervention. Contact CFEngine support if additional information
# and/or recommendation is needed.
#
##################################################################
##################################################################
#
# cfe_internal_hub_vars
#  - define a default location of Mission Portal WebGUI
#
##################################################################

bundle common cfe_internal_hub_vars
{
  vars:

    linux::

      "docroot" string => "$(sys.workdir)/httpd/htdocs",
      comment => "Root directory of Enterprise Web interface",
      handle => "cfe_internal_hub_vars_docroot";

}

##################################################################
#
# cfe_internal_update_folders
#  - create temp directories to make CFE silent (self-upgrading)
#
##################################################################

bundle agent cfe_internal_update_folders
{
  vars:

      "dirs" slist => {
                        "aix_5_powerpc",
                        "aix_6_powerpc",
                        "aix_6.1_powerpc",
                        "aix_7_powerpc",
                        "ubuntu_8_i686",
                        "ubuntu_8_x86_64",
                        "ubuntu_10_i686",
                        "ubuntu_10_x86_64",
                        "ubuntu_11_i686",
                        "ubuntu_11_x86_64",
                        "ubuntu_12_i686",
                        "ubuntu_12_x86_64",
                        "ubuntu_13_i686",
                        "ubuntu_13_x86_64",
                        "ubuntu_14_i686",
                        "ubuntu_14_x86_64",
                        "centos_5_i686",
                        "centos_5_x86_64",
                        "centos_6_i686",
                        "centos_6_x86_64",
                        "redhat_4_i686",
                        "redhat_4_x86_64",
                        "redhat_5_i686",
                        "redhat_5_x86_64",
                        "redhat_6_i686",
                        "redhat_6_x86_64",
                        "redhat_7_i686",
                        "redhat_7_x86_64",
                        "SuSE_10_i686",
                        "SuSE_10_x86_64",
                        "SuSE_11_i686",
                        "SuSE_11_x86_64",
                        "debian_5_i686",
                        "debian_5_x86_64",
                        "debian_6_i686",
                        "debian_6_x86_64",
                        "debian_7_i686",
                        "debian_7_x86_64",
                        "debian_8_i686",
                        "debian_8_x86_64",
                        "windows_i686",
                        "windows_x86_64",
                        "sunos_5.8_sun4u",
                        "sunos_5.8_sun4v",
                        "sunos_5.9_sun4u",
                        "sunos_5.9_sun4v",
                        "sunos_5.10_sun4u",
                        "sunos_5.10_sun4v",
                        "sunos_5.10_i86pc",
                        "hpux_ia64",
      },
      comment => "Define a list for $(sys.flavour)_$(sys.arch) directories",
      handle => "cfe_internal_update_folders_vars_dirs";

      #

  files:

      "$(sys.workdir)/master_software_updates/$(dirs)/." -> { "goal_updated" }
      comment => "Prepare binary upgrade folders for all distributions in our environment",
      handle => "cfe_internal_update_folders_files_create_dirs",
      create => "true";

}

##################################################################
#
# cfe_internal_apache_sudoer
#  - permit apache user to run passwordless sudo to cf-runagent
#
##################################################################

bundle agent cfe_internal_apache_sudoer
{
  classes:

    !windows::

      "sudoers_exists" expression => fileexists("/etc/sudoers"),
      comment => "Check if there is /etc/sudoers",
      handle => "cfe_internal_apache_sudoer_vars_linux_sudoers_exists";

      #

  files:

    sudoers_exists.cfengine_internal_sudoers_editing_enable::

      "/etc/sudoers"
      comment => "Permit Apache user to run passwordless sudo cf-runagent",
      handle => "cfe_internal_apache_sudoer_files_etc_sudoer",
      edit_line => apache_sudoer;

  reports:
    inform_mode.!cfengine_internal_sudoers_editing_enable::
      "$(this.bundle): editing of the sudoers file is disabled; the Apache user may not be able to run passwordless sudo cf-runagent";
}

#

bundle edit_line apache_sudoer
{
  insert_lines:

    linux::

      "$(def.cf_apache_user) ALL=(ALL) NOPASSWD:$(sys.bindir)/cf-runagent *"
      comment => "Add Apache user to run passwordless sudo cf-runagent",
      handle => "apache_sudoer_insert_lines";

}

##################################################################
#
# cfe_internal_webserver(on/off)
#  ***this is a new one***
##################################################################

bundle agent cfe_internal_webserver(state)
{

  classes:

      "on"       expression => strcmp("$(state)","on"),
      comment => "Check if a keyword \"on\" is inputs",
      handle => "cfe_internal_webserver_classes_on";

      "off"      expression => strcmp("$(state)","off"),
      comment => "Check if a keyword \"off\" is inputs",
      handle => "cfe_internal_webserver_classes_off";

      #

  processes:

    am_policy_hub.on::

      ".*$(sys.workdir)/httpd/bin/httpd.*"
      restart_class => "start_cfe_httpd",
      comment => "Check if CFE httpd process exists or not",
      handle => "cfe_internal_webserver_processes_start_cfe_httpd";

      #

  commands:

    start_cfe_httpd::

      "LD_LIBRARY_PATH=$(sys.workdir)/lib:$LD_LIBRARY_PATH $(sys.workdir)/httpd/bin/apachectl start"
      comment => "Start CFE httpd process if not exist",
      classes => kept_successful_command,
      handle => "cfe_internal_webserver_commands_start_cfe_httpd",
      contain => in_shell;

}

##################################################################
#
# cfe_internal_httpd_related
#  - to change default TCP (80) port of MP
#
##################################################################

bundle agent cfe_internal_httpd_related
{
  vars:

    am_policy_hub::

      "tcp_port" string => "80",
      comment => "TCP port that MP is using",
      handle => "cfe_internal_httpd_related_vars_tcp_port";

      #

  files:

    am_policy_hub::

      "$(sys.workdir)/httpd/conf/httpd.conf"
      comment => "Change TCP port on CFEngine httpd configuration",
      handle => "cfe_internal_httpd_related_files_httpd_conf",
      edit_line => change_port("$(tcp_port)"),
      classes => if_repaired("restart_cfe_httpd");

      "$(sys.workdir)/httpd/htdocs/application/config/appsettings.php"
      comment => "Add TCP port to MP setting",
      handle => "cfe_internal_httpd_related_files_appsettings_php",
      edit_line => change_appsettings("$(tcp_port)");

      #

  commands:

    restart_cfe_httpd::

      "LD_LIBRARY_PATH=$(sys.workdir)/lib:$LD_LIBRARY_PATH $(sys.workdir)/httpd/bin/apachectl restart"
      comment => "Restart CFEngine httpd if there is a change on configuration",
      classes => kept_successful_command,
      handle => "cfe_internal_httpd_related_commands_apachectl_restart",
      contain => in_shell;

}

      #

bundle edit_line change_port(p)
{
  replace_patterns:

    any::

      "^\s*Listen(\s+)(?!$(p)$).*$"
      comment => "Match Listen line and replace",
      handle => "cfe_internal_change_port_edit_line_listen_port",
      replace_with => value("Listen $(p)");

}

      #

bundle edit_line change_appsettings(p)
{
  classes:

    any::

      "original_config"
      expression => strcmp("$(p)","80"),
      comment => "If the port is 80 then create a class",
      handle => "cfe_internal_change_appsettings_classes_port_80";

      #

  replace_patterns:

    original_config::
      "\s+\$config\['rest_server'\]\s+=\s+\$protocol\s+\.\s+'localhost'\s+\.\s+'(?!/api).*"
      comment => "Match a line and replace",
      handle => "cfe_internal_change_appsetting_replace_patterns_port_80",
      replace_with => value("    $config['rest_server'] = $protocol . 'localhost' . '/api';");

    !original_config::
      "\s+\$config\['rest_server'\]\s+=\s+\$protocol\s+\.\s+'localhost'\s+\.\s+'(?!\:$(p)/api).*"
      comment => "Match a line and replace",
      handle => "cfe_internal_change_appsetting_replace_patterns_not_port_80",
      replace_with => value("    $config['rest_server'] = $protocol . 'localhost' . ':$(p)/api';");

}

bundle agent cfe_internal_php_runalerts
#@brief create and run PHP alerts
#  - Bundle status need to be updated and displayed on MP. We do it
# by running php binary with some parameters. cfe_internal_php_runalerts
# is a bundle to create a shell script on the fly and keep running
# the command by a specific interval (every 60s by default)
{
  vars:

    any::

      "runalerts_script" string => "$(sys.workdir)/bin/runalerts.sh",
      comment => "location of php runalerts script",
      handle => "cfe_internal_php_runalerts_vars_runalerts_script";

      "runalerts_stampfiles_dir" string => "$(sys.workdir)/httpd/php",
      comment => "location of runalerts stamp file directory",
      handle => "cfe_internal_php_runalerts_var_runalerts_stampfiles_dir";

      "sleep_time" string => "60",
      comment => "how often that php_runalerts will run in every seconds",
      handle => "cfe_internal_php_runalerts_vars_sleep_time";

      "stale_time" string => "10",
      comment => "if script does not function in minutes, restart the script",
      handle => "cfe_internal_php_runalerts_vars_stale_time";

      "sql[name]"        string => "sql",
      comment => "name of query type - sql",
      handle => "cfe_internal_php_runalerts_vars_sql_name";
      "sql[limit]"       string => "300",
      comment => "query limit of sql",
      handle => "cfe_internal_php_runalerts_vars_sql_limit";
      "sql[running]"     string => "20",
      comment => "how many query at a time of sql",
      handle => "cfe_internal_php_runalerts_vars_sql_running";

      "sketch[name]"     string => "sketch",
      comment => "name of query type - sketch",
      handle => "cfe_internal_php_runalerts_vars_sketch_name";
      "sketch[limit]"    string => "300",
      comment => "query limit of sketch",
      handle => "cfe_internal_php_runalerts_vars_sketch_limit";
      "sketch[running]"  string => "10",
      comment => "how many query at a time of sketch",
      handle => "cfe_internal_php_runalerts_vars_sketch_running";

      #

  files:

    any::

      "$(runalerts_script)"
      comment => "create php run alerts script",
      handle => "cfe_internal_php_runalerts_files_create_php_runalerts_script",
      create => "true",
      perms => mog("0755","root","root"),
      edit_defaults => empty,
      edit_line => my_php_runalerts_script("sql","sketch","$(runalerts_stampfiles_dir)","$(sleep_time)");

      "$(runalerts_stampfiles_dir)/runalerts_.*"
      comment => "sanity check for the run alerts script. if not, restart it.",
      handle => "cfe_internal_php_runalerts_files_status_check",
      delete => tidy,
      file_select => mins_old("$(stale_time)"),
      classes => if_repaired("kill_script");

      #

  processes:

    # Make sure to kill script on non active hub(s).
    kill_script||(enable_cfengine_enterprise_hub_ha.!hub_active)::

      "$(runalerts_script)"
      comment => "kill the php runalerts script because it is stale for some reason",
      handle => "cfe_internal_php_runalerts_process_kill_php_runalerts_script",
      signals => { "term" },
      classes => if_repaired("run_script");

    # Run script only on active hub to not send duplicated alert emails.
    !enable_cfengine_enterprise_hub_ha||(enable_cfengine_enterprise_hub_ha.hub_active)::

      "$(runalerts_script)"
      comment => "check if the php runalerts script is running or not",
      handle => "cfe_internal_php_runalerts_process_check_php_runalerts_script",
      restart_class => "run_script";

      #

  commands:

    # Run script only on active hub to not send duplicated alert emails.
    (run_script.!enable_cfengine_enterprise_hub_ha)||(run_script.enable_cfengine_enterprise_hub_ha.hub_active)::

      "$(runalerts_script) > /dev/null < /dev/null 2>&1 &"
      comment => "to run php alerts script",
      handle => "cfe_internal_php_runalerts_commands_run_php_runalerts_script",
      classes => kept_successful_command,
      contain => in_shell,
      action => cfe_internal_bg;

}

      #

body action cfe_internal_bg
{
 background => "true";
}

      #

body file_select mins_old(mins)
{
 mtime       => irange(0,ago(0,0,0,0,"$(mins)",0));
 file_result => "mtime";
}

      #

bundle edit_line my_php_runalerts_script(v1,v2,sdir,stime)
{
  insert_lines:

    any::

      "#!/bin/bash

while true; do
  touch $(sdir)/runalerts_$(cfe_internal_php_runalerts.sql[name])
 if [ -f $(sys.workdir)/httpd/php/runalerts_$(cfe_internal_php_runalerts.sql[name]) ]; then
  $(sys.workdir)/httpd/php/bin/php $(sys.workdir)/httpd/htdocs/index.php cli_tasks runalerts $(cfe_internal_php_runalerts.sql[limit]) $(cfe_internal_php_runalerts.sql[running]) $(cfe_internal_php_runalerts.sql[name]) >/dev/null 2>&1
 fi
  touch $(sdir)/runalerts_$(cfe_internal_php_runalerts.sketch[name])
 if [ -f $(sys.workdir)/httpd/php/runalerts_$(cfe_internal_php_runalerts.sketch[name]) ]; then
  $(sys.workdir)/httpd/php/bin/php $(sys.workdir)/httpd/htdocs/index.php cli_tasks runalerts $(cfe_internal_php_runalerts.sketch[limit]) $(cfe_internal_php_runalerts.sketch[running]) $(cfe_internal_php_runalerts.sketch[name]) >/dev/null 2>&1
 fi
 sleep $(stime)
done"
      comment => "contents inside php runalerts script",
      handle => "my_php_runalerts_script_insert_lines_php_runalerts_script";
}

bundle agent cfe_internal_truncate_events
#@brief cancel all the pending events once in a day

{
  commands:
    Hr05.Min00_05::
      "$(sys.workdir)/httpd/php/bin/php $(cfe_internal_hub_vars.docroot)/index.php cli_tasks truncate_events"
      comment => "Turncate all the pending notifications if there is any",
      classes => kept_successful_command,
      handle  => "cfe_internal_truncate_event_mp";
}

bundle agent cfe_internal_postgresql_maintenance
#@ignore
#@brief PostgreSQL needs to be cleaned regularly with the vacuumdb command
{
  vars:

      "postgres_vacuum_options" string => ifelse("postgresql_full_maintenance", "--full --dbname=cfdb", "--full --dbname=cfdb --table=__monitoringmg");
      "maintenance_type" string => ifelse("postgresql_full_maintenance", "full", "monitoring_only");

      "vacuumdb_cmd" string => "$(sys.bindir)/vacuumdb $(postgres_vacuum_options)",
      comment => "Command for cleaning a PostgreSQL database - $(maintenance_type)",
      handle => "cfe_internal_postgresql_maintenance_vars_vacuum_cmd_$(maintenance_type)";

    policy_server.enterprise.!cfengine_3_5::
      "cf_consumer_pid" string => readfile("$(sys.workdir)/cf-consumer.pid", 0),
      comment => "Read cf-consumer.pid for the main cf-consumer PID";

  classes:
      "cf_consumer_pid_correct" expression => isvariable("cf_consumer_pid"),
      comment => "Check if cf-consumer pid is correctly defined";

  processes:

    any::

      "cf-hub"      signals => { "term" },
      comment => "Terminate cf-hub while doing $(maintenance_type) PostgreSQL maintenance",
      handle => "cfe_internal_postgresql_$(maintenance_type)_maintenance_processes_term_cf_hub";

    cf_consumer_pid_correct::
      "cf-consumer" signals => { "kill" },
      process_select => by_pid("$(cf_consumer_pid)"),
      comment => "Kill cf-consumer while doing PostgreSQL maintenance",
      handle => "cfe_internal_postgresql_$(maintenance_type)_maintenance_processes_kill_cf_consumer";

      #

  commands:

    any::

      "$(vacuumdb_cmd)"
      comment => "Run $(maintenance_type) vacuumdb command",
      classes => kept_successful_command,
      handle => "cfe_internal_postgresql_maintenance_commands_run_vacuumdb_cmd_$(maintenance_type)";
}

bundle agent cfe_internal_purge_scheduled_reports_older_than_days(days)
{
  files:
    "$(cfe_internal_hub_vars.docroot)/tmp/."
      handle => "cfe_internal_purge_scheduled_reports_files_docroot_tmp",
      delete => tidy,
      depth_search => recurse("inf"),
      file_select => filetype_older_than("plain", $(days) ),
      comment => "Mission Portals scheduled reports are written here. They need
                  to be purged after some time so that they do not fill the disk.";
}
