##################################################################
#
# DO NOT EDIT THIS FILE. All policy files prefixed with CFE_ are maintained
# by CFEngine and its original state is required for internal operations of
# CFEngine. If the file has been modified CFEngineâ€™s upgrades may require 
# manual intervention. Contact CFEngine support if additional information 
# and/or recommendation is needed.
#
##################################################################
##################################################################
#
# cfe_internal_hub_vars
#  - define a default location of Mission Portal WebGUI  
#
##################################################################

bundle common cfe_internal_hub_vars
{
  vars:

    linux::
      
      "docroot" string => "/var/cfengine/httpd/htdocs",
      comment => "Root directory of Enterprise Web interface",
      handle => "cfe_internal_hub_vars_docroot";

}

##################################################################
#
# cfe_internal_update_folders
#  - create temp directories to make CFE silent (self-upgrading)  
#
##################################################################

bundle agent cfe_internal_update_folders
{
  vars:

      "dirs" slist => {
			"ubuntu_8_i686",
			"ubuntu_8_x86_64",
			"ubuntu_10_i686",
			"ubuntu_10_x86_64",
			"ubuntu_12_i686",
			"ubuntu_12_x86_64",
			"centos_5_i686",
			"centos_5_x86_64",
			"centos_6_i686",
			"centos_6_x86_64",
			"redhat_5_i686",
			"redhat_5_x86_64",
			"redhat_6_i686",
			"redhat_6_x86_64",
			"SuSE_11_i686",
			"SuSE_11_x86_64",
			"debian_5_i686",
			"debian_5_x86_64",
			"debian_6_i686",
			"debian_6_x86_64",
			"debian_7_i686",
			"debian_7_x86_64",
			"windows_i686",
			"windows_x86_64",
      },
      comment => "Define a list for $(sys.flavour)_$(sys.arch) directories",
      handle => "cfe_internal_update_folders_vars_dirs";

      #

  files:

      "$(sys.workdir)/master_software_updates/$(dirs)/." -> { "goal_updated" }
      comment => "Prepare binary upgrade folders for all distributions in our environment",
      handle => "cfe_internal_update_folders_files_create_dirs",
      create => "true";

}

##################################################################
#
# cfe_internal_rotate_mongod_log
#  - Make sure to rotate the mongod.log to avoid disk filling up
#
##################################################################

bundle agent cfe_internal_rotate_mongod_log {
      
  files:
      
    mongod_log_rotated::
      
      "/var/log"
      comment => "Remove mongod logs older than 5 weeks",
      handle => "cfe_internal_rotate_mongod_log_files_mongo_log",
      file_select => name_age("^mongod.log.\d{4}-\d{2}-\d{2}T\d{2}-\d{2}-\d{2}$","35"),
      depth_search => recurse("1"),
      delete => tidy;
      
  processes:
      
    Sunday::
      
      "mongod"
      comment  => "Send mongod the SIGUSR signal to refresh the log on a weekly basis",
      handle  => "cfe_internal_rotate_mongod_log_processes_mongod",
      signals => { "usr1" },
      classes => if_repaired("mongod_log_rotated"),
      action => if_elapsed("10000");
      
}

##################################################################
#
# cfe_internal_disable_selinux ***OBSOLETE***
#  - Ensure everything will work smoothly. Put SELinux to
# Permissive mode by now
#
##################################################################

bundle agent cfe_internal_disable_selinux
{
  classes:

      # we only care about selinux for redhat for now, can add more

    redhat::
      
      "selinux_exists" expression => fileexists("/usr/sbin/selinuxenabled"),
      comment => "Make sure the binary exists",
      handle => "cfe_internal_disable_selinux_classes_selinux_exits";
      
    redhat.selinux_exists::
      
      "disable_selinux" expression => returnszero("/usr/sbin/selinuxenabled", "noshell"),
      comment => "Check if selinux is enabled",
      handle => "cfe_internal_disable_selinux_classes_disable_selinux"; 

      #

  commands:

    am_policy_hub.disable_selinux::

      "/usr/sbin/setenforce 0"
      comment => "Disable SELINUX every hour",
      handle => "cfe_internal_disable_selinux_commands_disable_selinux",
      #      classes => cmd_repair("0", "cmd_fixed_setenforce"),
      action => if_elapsed("60");

      #

  reports:

    disable_selinux::

      " NB - Disabling SELinux to allow PHP to function"
      comment => "Alert message on screen once a day",
      handle => "cfe_internal_disable_selinux_reports_disable_selinux",
      action => if_elapsed("1440");

}

##################################################################
#
# cfe_internal_selinux(condition)
#  - Allow SELinux to run Mission Portal and Mongo DB
#
# condition
#   fix: Leave SELinux running and pierce a hole for Mission Portal
#   disable: Like what we have done. Set SELinux to Permissive mode
#
##################################################################

bundle agent cfe_internal_selinux(condition)
{
  vars:

    redhat::

      "selinux_status"  string => execresult("/usr/sbin/getenforce","noshell"),
      comment => "Get SELinux status",
      handle => "cfe_internal_selinux_vars_selinux_status";

    redhat_6|centos_6|oracle_6|scientific_6::

      "selinux_packages" slist => {
                                    "policycoreutils-python",
                                    "prelink",
      },
      comment => "List of packages to be installed for RHEL 6",
      handle => "cfe_internal_selinux_vars_selinux_packages";

      #

  classes:

    redhat::

      "have_semanage"      expression => fileexists("/usr/sbin/semanage"),
      comment => "Install packages from the list",
      handle => "cfe_internal_selinux_classes_have_semanage";

      "fix_selinux"        expression => strcmp("$(condition)","fix"),
      comment => "Check to allow SELinux rules for Mission Portal to function",
      handle => "cfe_internal_selinux_classes_fix_selinux";

      "disable_selinux"    expression => strcmp("$(condition)","disable"),
      comment => "Check to disable SELinux",
      handle => "cfe_internal_selinux_classes_disable_selinux";

      "selinux_enforcing"  expression => strcmp("Enforcing","$(selinux_status)"),
      comment => "Check if SELinux is running",
      handle => "cfe_internal_selinux_classes_selinux_enforcing";

      "selinux_disabled"   expression => strcmp("Disabled","$(selinux_status)"),
      comment => "Check if SELinux is disabled",
      handle => "cfe_internal_selinux_classes_selinux_disabled";

    have_semanage.!selinux_disabled::

      "httpd_can_network_connect" not => returnszero("/usr/sbin/getsebool -a | grep \"httpd_can_network_connect --> on\" > /dev/null", "useshell"),
      comment => "Check if httpd_can_network_connect is permitted",
      handle => "cfe_internal_selinux_classes_httpd_can_network_connect";

      #

  packages:

    redhat_6|centos_6|oracle_6|scientific_6::

      "$(selinux_packages)"
      comment => "Install packages from the list",
      handle => "cfe_internal_selinux_packages_install_selinux_packages",
      package_policy => "add",
      package_method => yum_rpm;
      
      #

  commands:

    selinux_enforcing.fix_selinux.have_semanage::

      "/usr/bin/chcon -R -h -t httpd_sys_content_t /var/cfengine/lib"
      comment => "Allow apache to load CFEngine shared libraries with SELinux on",
      handle => "cfe_internal_selinux_commands_allow_httpd_sys_content_t_cfengine_lib";

      "/usr/bin/chcon -R -h -t httpd_sys_content_t /var/cfengine/policy_server.dat"
      comment => "Fix problem with SELinux",
      handle => "cfe_internal_selinux_commands_allow_httpd_sys_content_t_policy_server_dat";

      "/usr/bin/execstack -c /var/cfengine/lib/*.so.*"
      comment => "Make shared libraries not to require executable stack",
      handle => "cfe_internal_selinux_commands_fix_shared_libraries",
      contain => in_shell;

      # Allow httpd_can_network_connect so HTTPD will be able to talk with MongoDB

    httpd_can_network_connect.fix_selinux::

      "/usr/sbin/setsebool -P httpd_can_network_connect 1"
      comment => "SELinux allows HTTPD to use files on the host",
      handle => "cfe_internal_selinux_commands_allow_httpd_can_network_connect";

    disable_selinux::

      "/usr/sbin/setenforce 0"
      comment => "Disable SELinux every hour",
      handle => "cfe_internal_selinux_commands_disable_selinux",
      #      classes => cmd_repair("0", "cmd_fixed_setenforce"),
      action => if_elapsed("60");

      #

  reports:

    disable_selinux::

      "NB - Disabling SELinux to allow Apache+PHP to function"
      comment => "Alert message on screen once a day",
      handle => "cfe_internal_selinux_reports_disable_selinux",
      action => if_elapsed("1440");

}

##################################################################
#
# cfe_internal_hub_maintain
#  - Start the hub maintenance process
#  - By default, this is run every 6 hours
#
#  When modifying this, the following must be considered:
#  - Intervals less than 6 hours must be used with caution
#       as maintenance process could take a considerable time
#  - parameters to action => bg("<if_elapsed>", "<expireafter>")
#       must be changed accordingly
##################################################################

bundle agent cfe_internal_hub_maintain
{
  commands:

    (Hr00|Hr06|Hr12|Hr18).Min00_05::

      "$(sys.cf_hub) -m"
      comment => "Perform hub database maintenance. This removes expired entries in the enterprise database and creates a total compliance cache for Mission Portal",
      handle => "cfe_internal_start_hub_start_maintenance",
      action => bg("60","60");
}

##################################################################
#
# cfe_internal_apache_sudoer
#  - permit apache user to run passwordless sudo to cf-runagent
#
##################################################################

bundle agent cfe_internal_apache_sudoer
{
  files:

    linux::
      
      "/etc/sudoers"
      comment => "Permit Apache user to run passwordless sudo cf-runagent",
      handle => "cfe_internal_apache_sudoer_files_etc_sudoer",
      edit_line => apache_sudoer;
}

#

bundle edit_line apache_sudoer
{
  insert_lines:

    linux::

      "apache ALL=(ALL) NOPASSWD:/var/cfengine/bin/cf-runagent *"
      comment => "Add Apache user to run passwordless sudo cf-runagent",
      handle => "apache_sudoer_insert_lines";
      
}


##################################################################
#
# cfe_internal_webserver(on/off)
#  ***this is a new one***
##################################################################

bundle agent cfe_internal_webserver(state)
{

  classes:

      "on"       expression => strcmp("$(state)","on"),
      comment => "Check if a keyword \"on\" is inputs",
      handle => "cfe_internal_webserver_classes_on";

      "off"      expression => strcmp("$(state)","off"),
      comment => "Check if a keyword \"off\" is inputs",
      handle => "cfe_internal_webserver_classes_off";

      #

  processes:

    am_policy_hub.on::
      
      ".*/var/cfengine/httpd/bin/httpd.*"
      restart_class => "start_cfe_httpd",
      comment => "Check if CFE httpd process exists or not",
      handle => "cfe_internal_webserver_processes_start_cfe_httpd";

      #

  commands:
      
    start_cfe_httpd::
      
      "LD_LIBRARY_PATH=/var/cfengine/lib:$LD_LIBRARY_PATH /var/cfengine/httpd/bin/apachectl start"
      comment => "Start CFE httpd process if not exist",
      handle => "cfe_internal_webserver_commands_start_cfe_httpd",
      contain => in_shell;
      
}

##################################################################
#
# cfe_internal_httpd_related
#  - to change default TCP (80) port of MP
#
##################################################################

bundle agent cfe_internal_httpd_related
{
  vars:

    am_policy_hub::

      "tcp_port" string => "80",
      comment => "TCP port that MP is using",
      handle => "cfe_internal_httpd_related_vars_tcp_port";

      #

  files:

    am_policy_hub::

      "/var/cfengine/httpd/conf/httpd.conf" 
      comment => "Change TCP port on CFEngine httpd configuration",
      handle => "cfe_internal_httpd_related_files_httpd_conf",
      edit_line => change_port("$(tcp_port)"),
      classes => if_repaired("restart_cfe_httpd");

      "/var/cfengine/httpd/htdocs/application/config/appsettings.php" 
      comment => "Add TCP port to MP setting",
      handle => "cfe_internal_httpd_related_files_appsettings_php",
      edit_line => change_appsettings("$(tcp_port)");

      #

  commands:

    restart_cfe_httpd::

      "LD_LIBRARY_PATH=/var/cfengine/lib:$LD_LIBRARY_PATH /var/cfengine/httpd/bin/apachectl restart" 
      comment => "Restart CFEngine httpd if there is a change on configuration",
      handle => "cfe_internal_httpd_related_commands_apachectl_restart",
      contain => in_shell;
      
}

      #

bundle edit_line change_port(p)
{
  replace_patterns:

    any::

      "^Listen(\s+)(?!$(p)).*" 
      comment => "Match Listen line and replace",
      handle => "cfe_internal_change_port_edit_line_listen_port",
      replace_with => value("Listen $(p)");
      
}

      #

bundle edit_line change_appsettings(p)
{
  classes:

    any::

      "original_config" 
      expression => strcmp("$(p)","80"),
      comment => "If the port is 80 then create a class",
      handle => "cfe_internal_change_appsettings_classes_port_80";

      #

  replace_patterns:

    original_config::
      "\s+\$config\['rest_server'\]\s+=\s+\$protocol\s+\.\s+\$_SERVER\['SERVER_NAME'\]\s+\.\s+'(?!/api).*" 
      comment => "Match a line and replace",
      handle => "cfe_internal_change_appsetting_replace_patterns_port_80",
      replace_with => value("    $config['rest_server'] = $protocol . $_SERVER['SERVER_NAME'] . '/api';");

    !original_config::
      "\s+\$config\['rest_server'\]\s+=\s+\$protocol\s+\.\s+\$_SERVER\['SERVER_NAME'\]\s+\.\s+'(?!\:$(p)/api).*" 
      comment => "Match a line and replace",
      handle => "cfe_internal_change_appsetting_replace_patterns_not_port_80",
      replace_with => value("    $config['rest_server'] = $protocol . $_SERVER['SERVER_NAME'] . ':$(p)/api';");
      
}
