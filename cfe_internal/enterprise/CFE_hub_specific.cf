##################################################################
#
# DO NOT EDIT THIS FILE. All policy files prefixed with CFE_ are maintained
# by CFEngine and its original state is required for internal operations of
# CFEngine. If the file has been modified CFEngineâ€™s upgrades may require
# manual intervention. Contact CFEngine support if additional information
# and/or recommendation is needed.
#
##################################################################
##################################################################
#
# cfe_internal_hub_vars
#  - define a default location of Mission Portal WebGUI
#
##################################################################

bundle common cfe_internal_hub_vars
{
  vars:

    policy_server::

      "docroot" string => "$(sys.workdir)/httpd/htdocs",
        comment => "Root directory of Enterprise Web interface",
        handle => "cfe_internal_hub_vars_docroot";


      # TODO Consider tagging these files for file integrity monitoring.

      "SSLCertificateFile"
        string => "$(sys.workdir)/httpd/ssl/certs/$(sys.fqhost).cert";

      "SSLCertificateKeyFile"
        string => "$(sys.workdir)/httpd/ssl/private/$(sys.fqhost).key";

      "SSLCertificatePasswdKeyFile"
        string => "$(sys.workdir)/httpd/ssl/private/$(sys.fqhost).pass.key";

      "SSLCertificateSigningRequest"
        string => "$(sys.workdir)/httpd/ssl/private/$(sys.fqhost).csr";

      "SSLCnf"
        string => "$(sys.workdir)/ssl/openssl.cnf";

      "access_log" string => "$(sys.workdir)/httpd/logs/access_log";
      "error_log"  string => "$(sys.workdir)/httpd/logs/error_log";
      "ssl_request_log" string => "$(sys.workdir)/httpd/logs/ssl_request_log";

      "SSLCertificateKeySize" string => "4096";
      "SSLCertificateDaysValid" string => "3650";

}

##################################################################
#
# cfe_internal_update_folders
#  - create temp directories to make CFE silent (self-upgrading)
#
##################################################################

bundle agent cfe_internal_update_folders
{
  vars:

      "dirs" slist => {
                        "aix_5_powerpc",
                        "aix_6_powerpc",
                        "aix_6.1_powerpc",
                        "aix_7_powerpc",
                        "ubuntu_8_i686",
                        "ubuntu_8_x86_64",
                        "ubuntu_10_i686",
                        "ubuntu_10_x86_64",
                        "ubuntu_11_i686",
                        "ubuntu_11_x86_64",
                        "ubuntu_12_i686",
                        "ubuntu_12_x86_64",
                        "ubuntu_13_i686",
                        "ubuntu_13_x86_64",
                        "ubuntu_14_i686",
                        "ubuntu_14_x86_64",
                        "centos_5_i686",
                        "centos_5_x86_64",
                        "centos_6_i686",
                        "centos_6_x86_64",
                        "redhat_4_i686",
                        "redhat_4_x86_64",
                        "redhat_5_i686",
                        "redhat_5_x86_64",
                        "redhat_6_i686",
                        "redhat_6_x86_64",
                        "redhat_7_i686",
                        "redhat_7_x86_64",
                        "SuSE_10_i686",
                        "SuSE_10_x86_64",
                        "SuSE_11_i686",
                        "SuSE_11_x86_64",
                        "debian_5_i686",
                        "debian_5_x86_64",
                        "debian_6_i686",
                        "debian_6_x86_64",
                        "debian_7_i686",
                        "debian_7_x86_64",
                        "debian_8_i686",
                        "debian_8_x86_64",
                        "windows_i686",
                        "windows_x86_64",
                        "sunos_5.8_sun4u",
                        "sunos_5.8_sun4v",
                        "sunos_5.9_sun4u",
                        "sunos_5.9_sun4v",
                        "sunos_5.10_sun4u",
                        "sunos_5.10_sun4v",
                        "sunos_5.10_i86pc",
                        "hpux_ia64",
      },
      comment => "Define a list for $(sys.flavour)_$(sys.arch) directories",
      handle => "cfe_internal_update_folders_vars_dirs";

      #

  files:

      "$(sys.workdir)/master_software_updates/$(dirs)/." -> { "goal_updated" }
      comment => "Prepare binary upgrade folders for all distributions in our environment",
      handle => "cfe_internal_update_folders_files_create_dirs",
      create => "true";

}

##################################################################
#
# cfe_internal_apache_sudoer
#  - permit apache user to run passwordless sudo to cf-runagent
#
##################################################################

bundle agent cfe_internal_apache_sudoer
{
  classes:

    !windows::

      "sudoers_exists" expression => fileexists("/etc/sudoers"),
      comment => "Check if there is /etc/sudoers",
      handle => "cfe_internal_apache_sudoer_vars_linux_sudoers_exists";

      #

  files:

    sudoers_exists.cfengine_internal_sudoers_editing_enable::

      "/etc/sudoers"
      comment => "Permit Apache user to run passwordless sudo cf-runagent",
      handle => "cfe_internal_apache_sudoer_files_etc_sudoer",
      edit_line => apache_sudoer;

  reports:
    (DEBUG|DEBUG_cfengine_internal_apache_sudoer).!cfengine_internal_sudoers_editing_enable::
      "DEBUG $(this.bundle): Editing of the sudoers file is disabled. The Apache user
       may not be able to run passwordless sudo cf-runagent";
}

#

bundle edit_line apache_sudoer
{
  insert_lines:

    linux::

      "$(def.cf_apache_user) ALL=(ALL) NOPASSWD:$(sys.bindir)/cf-runagent *"
      comment => "Add Apache user to run passwordless sudo cf-runagent",
      handle => "apache_sudoer_insert_lines";

}



bundle agent cfe_internal_php_runalerts
#@brief create and run PHP alerts
#  - Bundle status need to be updated and displayed on MP. We do it
# by running php binary with some parameters. cfe_internal_php_runalerts
# is a bundle to create a shell script on the fly and keep running
# the command by a specific interval (every 60s by default)
{
  vars:

    any::

      "runalerts_script" string => "$(sys.workdir)/bin/runalerts.sh",
      comment => "location of php runalerts script",
      handle => "cfe_internal_php_runalerts_vars_runalerts_script";

      "runalerts_stampfiles_dir"
      string => "$(sys.workdir)/httpd/php/runalerts-stamp",
      comment => "location of runalerts stamp file directory",
      handle => "cfe_internal_php_runalerts_var_runalerts_stampfiles_dir";

      "sleep_time" string => "60",
      comment => "how often that php_runalerts will run in every seconds",
      handle => "cfe_internal_php_runalerts_vars_sleep_time";

      "stale_time" string => "10",
      comment => "if script does not function in minutes, restart the script",
      handle => "cfe_internal_php_runalerts_vars_stale_time";

      "sql[name]"        string => "sql",
      comment => "name of query type - sql",
      handle => "cfe_internal_php_runalerts_vars_sql_name";
      "sql[limit]"       string => "300",
      comment => "query limit of sql",
      handle => "cfe_internal_php_runalerts_vars_sql_limit";
      "sql[running]"     string => "20",
      comment => "how many query at a time of sql",
      handle => "cfe_internal_php_runalerts_vars_sql_running";

      "sketch[name]"     string => "sketch",
      comment => "name of query type - sketch",
      handle => "cfe_internal_php_runalerts_vars_sketch_name";
      "sketch[limit]"    string => "300",
      comment => "query limit of sketch",
      handle => "cfe_internal_php_runalerts_vars_sketch_limit";
      "sketch[running]"  string => "10",
      comment => "how many query at a time of sketch",
      handle => "cfe_internal_php_runalerts_vars_sketch_running";

      #

  files:

    any::

      "$(runalerts_script)"
      comment => "create php run alerts script",
      handle => "cfe_internal_php_runalerts_files_create_php_runalerts_script",
      create => "true",
      perms => mog("0755","root","root"),
      edit_defaults => empty,
      edit_line => my_php_runalerts_script("sql","sketch","$(runalerts_stampfiles_dir)","$(sleep_time)");

      # TODO Move runalerts stamp files into $(sys.statedir)

      "$(runalerts_stampfiles_dir)/."
      create => "true",
      comment => "We provide a single directory where the runalerts process
                  should maintain its timestamp tracking.";

      # This promise uses the side effect of cleaning up the timestamp files to
      # realize when it's time to kill the runalerts script. However, in order
      # to make sure that runalerts can write to the state files, we will also
      # make sure they exist with specific perms. This extra churn is probably
      # unnecessary.

      "$(runalerts_stampfiles_dir)/runalerts_.*"
      comment => "sanity check for the run alerts script. if not, restart it.",
      handle => "cfe_internal_php_runalerts_files_status_check",
      delete => tidy,
      file_select => mins_old("$(stale_time)"),
      classes => if_repaired("kill_script");

      "$(runalerts_stampfiles_dir)/runalerts_sketch"
      create => "true",
      perms => mog("600", $(def.cf_apache_user), $(def.cf_apache_group) ),
      handle => "cfe_enterprise_runalerts_sketch_timestamp_perms",
      comment => "Sketch alert status timestamp file must be write-able by
                  $(def.cf_apache_user) or it will log errors on 3.10+.";

      "$(runalerts_stampfiles_dir)/runalerts_sql"
      create => "true",
      perms => mog("600", $(def.cf_apache_user), $(def.cf_apache_group) ),
      handle => "cfe_enterprise_runalerts_sql_timestamp_perms",
      comment => "SQL alert status timestamp file must be write-able by
                  $(def.cf_apache_user) or it will log errors on 3.10+";

  processes:

    # Make sure to kill script on non active hub(s).
    kill_script||(enable_cfengine_enterprise_hub_ha.!hub_active)::

      "$(runalerts_script)"
      comment => "kill the php runalerts script because it is stale for some reason",
      handle => "cfe_internal_php_runalerts_process_kill_php_runalerts_script",
      signals => { "term" },
      classes => if_repaired("run_script");

    # Run script only on active hub to not send duplicated alert emails. When
    # running on systemd host and cfengine 3.10+ this function is handled by the
    # cf-runalerts systemd unit.
    !enable_cfengine_enterprise_hub_ha||(enable_cfengine_enterprise_hub_ha.hub_active).!(cfengine_3_10.systemd)::

      "$(runalerts_script)"
      comment => "check if the php runalerts script is running or not",
      handle => "cfe_internal_php_runalerts_process_check_php_runalerts_script",
      restart_class => "run_script";

      #

  commands:

    # Run script only on active hub to not send duplicated alert emails.
    (run_script.!enable_cfengine_enterprise_hub_ha)||(run_script.enable_cfengine_enterprise_hub_ha.hub_active).!(cfengine_3_10.systemd)::

      "$(runalerts_script) > /dev/null < /dev/null 2>&1 &"
      comment => "to run php alerts script",
      handle => "cfe_internal_php_runalerts_commands_run_php_runalerts_script",
      classes => kept_successful_command,
      contain => in_shell,
      action => cfe_internal_bg;

}

      #

body action cfe_internal_bg
{
 background => "true";
}

      #

body file_select mins_old(mins)
{
 mtime       => irange(0,ago(0,0,0,0,"$(mins)",0));
 file_result => "mtime";
}

      #

bundle edit_line my_php_runalerts_script(v1,v2,sdir,stime)
{
  insert_lines:

    any::

      "#!/bin/bash

while true; do
  touch $(sdir)/runalerts_$(cfe_internal_php_runalerts.sql[name])
 if [ -f $(sdir)/runalerts_$(cfe_internal_php_runalerts.sql[name]) ]; then
  $(sys.workdir)/httpd/php/bin/php $(sys.workdir)/httpd/htdocs/index.php cli_tasks runalerts $(cfe_internal_php_runalerts.sql[limit]) $(cfe_internal_php_runalerts.sql[running]) $(cfe_internal_php_runalerts.sql[name]) >/dev/null 2>&1
 fi
  touch $(sdir)/runalerts_$(cfe_internal_php_runalerts.sketch[name])
 if [ -f $(sdir)/runalerts_$(cfe_internal_php_runalerts.sketch[name]) ]; then
  $(sys.workdir)/httpd/php/bin/php $(sys.workdir)/httpd/htdocs/index.php cli_tasks runalerts $(cfe_internal_php_runalerts.sketch[limit]) $(cfe_internal_php_runalerts.sketch[running]) $(cfe_internal_php_runalerts.sketch[name]) >/dev/null 2>&1
 fi
 sleep $(stime)
done"
      comment => "contents inside php runalerts script",
      handle => "my_php_runalerts_script_insert_lines_php_runalerts_script";
}

bundle agent cfe_internal_truncate_events
#@brief cancel all the pending events once in a day

{
  commands:
    Hr05.Min00_05::
      "$(sys.workdir)/httpd/php/bin/php $(cfe_internal_hub_vars.docroot)/index.php cli_tasks truncate_events"
      comment => "Turncate all the pending notifications if there is any",
      classes => kept_successful_command,
      handle  => "cfe_internal_truncate_event_mp";
}

bundle agent cfe_internal_purge_scheduled_reports_older_than_days(days)
{
  files:
    "$(cfe_internal_hub_vars.docroot)/tmp/."
      handle => "cfe_internal_purge_scheduled_reports_files_docroot_tmp",
      delete => tidy,
      depth_search => recurse("inf"),
      file_select => filetype_older_than("plain", $(days) ),
      comment => "Mission Portals scheduled reports are written here. They need
                  to be purged after some time so that they do not fill the disk.";
}
