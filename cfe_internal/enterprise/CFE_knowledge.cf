##################################################################
#
# DO NOT EDIT THIS FILE. All policy files prefixed with CFE_ are maintained
# by CFEngine and its original state is required for internal operations of
# CFEngine. If the file has been modified CFEngineâ€™s upgrades may require
# manual intervention. Contact CFEngine support if additional information
# and/or recommendation is needed.
#
##################################################################
##################################################################
#
# cfe_internal_setup_knowledge
#  - populate knowledge bank database (CFE Enterprise)
#
##################################################################

bundle agent cfe_internal_setup_knowledge
# @brief Policy related to enterprise hubs
{

  classes:

      #
      # check when updates arrive, new compared to the database
      #

      "ENT_3572" -> { "ENT-3572" }
        comment => "Hosts with this class need to be sure that the ssl directory
                    is readable and executable by other users",
        or => {
                "enterprise_3_7_3", "enterprise_3_7_4", "enterprise_3_7_5",
                "enterprise_3_10_0"
              };

  files:

    !mpf_disable_mission_portal_docroot_sync_from_share_gui::
      "$(cfe_internal_hub_vars.docroot)"
      comment => "Copy the basic knowledge base configuration from the installation to doc root",
      handle => "cfe_internal_setup_knowledge_files_doc_root_1",
      copy_from => no_backup_cp("$(sys.workdir)/share/GUI"),
      depth_search => recurse("inf");

    any::

      "$(cfe_internal_hub_vars.docroot)"
      comment => "All files in there should be at least 0644",
      handle => "cfe_internal_setup_knowledge_files_doc_root_2",
      file_select => cfe_internal_docroot_perms,
      perms => mog("0440", "root", $(def.cf_apache_group) ),
      depth_search => recurse_exclude("inf");   # see exclude dirs in recurse_exclude() body

      "$(cfe_internal_hub_vars.docroot)/.htaccess"
      comment => "Correct up htaccess file in doc root",
      handle => "cfe_internal_setup_knowledge_files_doc_root_htaccess",
      copy_from => no_backup_cp("$(sys.workdir)/share/GUI/Apache-htaccess");

      "$(cfe_internal_hub_vars.docroot)/scripts/."
      comment => "Ensure permissions for $(cfe_internal_hub_vars.docroot)/scripts",
      handle => "cfe_internal_setup_knowledge_files_doc_root_scripts",
      create => "true",
      depth_search => recurse_basedir("inf"),
      perms => mog("0440", "root", $(def.cf_apache_group) );

      "$(cfe_internal_hub_vars.docroot)/tmp/."
      handle => "cfe_internal_setup_knowledge_files_doc_root_tmp",
      create => "true",
      depth_search => recurse_basedir("inf"),
      perms => mog("0660", "root", $(def.cf_apache_group)),
      comment => "Ensure permissions for $(cfe_internal_hub_vars.docroot)/tmp.
                  This is where scheduled reports generated by Mission Portal
                  (temp files to email)";

      "$(cfe_internal_hub_vars.docroot)/application/logs/."
      comment => "Only the webserver needs to be able to write to application logs.",
      handle => "cfe_internal_setup_knowledge_files_doc_root_application_logs",
      create => "true",
      depth_search => recurse_basedir("inf"),
      file_select => cfe_internal_exclude_index_html,
      perms => mog("0640", $(def.cf_apache_user), $(def.cf_apache_group) );

      "$(cfe_internal_hub_vars.docroot)/application"
      comment => "No one should be able to write to the application, and only
                  the webserver needs access",
      handle => "cfe_internal_setup_knowledge_files_all_files_in_application",
      depth_search => cfe_internal_docroot_application_perms,
      perms => mog("0440", "root", $(def.cf_apache_group) );

      "$(cfe_internal_hub_vars.docroot)/api/."
      depth_search => recurse_basedir("inf"),
      handle => "cfe_internal_setup_knowledge_files_doc_root_api",
      file_select => cfe_internal_exclude_sh_pl_scripts,
      perms => mog("0440", "root", $(def.cf_apache_group) ),
      comment => "No one should be able to write to the application config code,
                  and only the webserver needs access to read the config.";

      "$(cfe_internal_hub_vars.docroot)/api/."
      depth_search => recurse_basedir("inf"),
      handle => "cfe_internal_setup_knowledge_files_doc_root_api_scripts",
      file_select => cfe_internal_sh_pl_scripts,
      perms => mog("0550", "root", $(def.cf_apache_group) ),
      comment => "The scripts need to be executable, but only by the
                  webserver and root users.";

      "$(cfe_internal_hub_vars.docroot)/api/static/."
      perms => mog("0660", "root", $(def.cf_apache_group) ),
      comment => "This is where exported PDF and CSV reports from Mission
                  Portal are written, it be writeable by the webserver";

      "$(cfe_internal_hub_vars.docroot)/api/static/."
      comment => "Exported reports only need to be readable by the webserver.",
      handle => "cfe_internal_setup_knowledge_files_doc_root_api_static",
      depth_search => recurse("inf"),
      file_select => cfe_internal_docroot_api_static_perms,
      perms => mog("0440", "root", $(def.cf_apache_group) );

      "$(sys.workdir)/httpd/logs/."
      comment => "Ensure permissions for $(sys.workdir)/httpd/logs",
      handle => "cfe_internal_setup_knowledge_files_httpd_logs",
      create => "true",
      perms => mog("0640", $(def.cf_apache_user), $(def.cf_apache_group));

      "$(cfe_internal_hub_vars.docroot)/../ssl/."
        perms => mog("0440", "root", "root" ),
        if => not( "ENT_3572" );

      "$(cfe_internal_hub_vars.docroot)/../ssl/." -> { "ENT-3572" }
        perms => mog("0444", "root", "root" ),
        if => "ENT_3572",
        comment => "Exported be 0 bytes in some versions if the ssl directory is
                    not accessible to all users.";

      "$(cfe_internal_hub_vars.docroot)/../ssl/private/."
        depth_search => recurse_with_base("inf"),
        perms => mog("0440", "root", "root"),
        comment => "Private keys are secrets and should not be accessible by
                    anyone other than root.";

      "$(cfe_internal_hub_vars.docroot)/../ssl/csr/."
        depth_search => recurse_with_base("inf"),
        perms => mog("0440", "root", "root"),
        comment => "Certificate signing requests, while not secrets do not need to
                    be readable by others.";

      "$(cfe_internal_hub_vars.docroot)/../ssl/certs/." -> { "ENT-3050", "Mission Portal" }
        depth_search => recurse_with_base("inf"),
        perms => mog("0444", "root", "root"),
        comment => "Certificates need to be read by any user wishing to validate
                    a request. For example Mission Portals api.";


      "$(cfe_internal_hub_vars.docroot)/"
        depth_search => recurse_basedir("inf"),
        handle => "cfe_internal_setup_knowledge_files_doc_root_htaccess_perms",
        file_select => cfe_internal_htaccess,
        perms => mog("0440", "root", $(def.cf_apache_group) ),
        comment => ".htaccess files should only be readable by webserver.";

      "$(cfe_internal_hub_vars.docroot)/ldap/config/settings.ldap.php" -> { "ENT-3400" }
        handle => "cfe_internal_setup_knowledge_files_ldap_config_settings_perms",
        perms => mog("0600", $(def.cf_apache_user), $(def.cf_apache_group) ),
        if => fileexists( "$(cfe_internal_hub_vars.docroot)/ldap/config/settings.ldap.php" ),
        comment => "If the ldap settings are not writeable by
                    $(def.cf_apache_user) then users will not be able to change
                    ldap settings.";


      "$(sys.workdir)/share/GUI/."
        perms => mog("0400", "root", "root" ),
        depth_search => recurse_basedir("inf"),
        comment => "No Mission Portal code in share needs to be accessed by
                    anyone";

      "$(sys.workdir)/." -> { "ENT-3299" }
        perms => mog("755", "root", "root"),
        comment => "Ensure that others (like cfpostgres and cfapache) are able
                    to enter and read from cfengines workdir";

      "$(sys.workdir)/modules/."
        perms => mog("755", "root", "root"),
        comment => "The agent will complain if any other users (group or other)
                    have write access to the modules directory.";
}

############################################################################

body depth_search recurse_basedir(d)
# @brief Search `d` levels deep including the base dir
{
      depth => "$(d)";
      include_basedir => "true";
}

###########################################################################

body depth_search recurse_basedir_exclude(d)
# @brief Search `d` levels deep including the base dir but exclude some specific dirs
{
      depth => "$(d)";
      include_basedir => "true";
      exclude_dirs => { "static" };
}

############################################################################

body file_select cfe_internal_docroot_perms
# @brief Select files not named `.htacces` or `settings.ldap.php`
{
  leaf_name => { "\.htaccess", "settings.ldap.php" };
      # htaccess are going the way of the dodo bird
      # settings.ldap.php permissions are handled explicitly in it's own bundle
  file_result => "!leaf_name";
}

############################################################################
body depth_search recurse_exclude(d)
# @brief Search to a depth of `d` excluding known directories
{
      depth => "$(d)";
      exclude_dirs => { "hub" , "graphs", "scripts", "tmp", "logs", "api", "rest", "application", "dc-scripts" };
}

############################################################################

body file_select cfe_internal_exclude_sh_pl_scripts
# @brief select plain files not ending in `.sh` and `.pl`
{
  leaf_name => { ".*\.sh",".*\.pl"};
  file_types => { "plain" };
  file_result => "!leaf_name.file_types";
}

############################################################################

body file_select cfe_internal_sh_pl_scripts
# @brief select plain files ending in `.sh` and `.pl`
{
  leaf_name => { ".*\.sh",".*\.pl" };
  file_types => { "plain" };
  file_result => "leaf_name.file_types";
}

############################################################################

body file_select cfe_internal_htaccess
# @brief select files named `.htaccess`
{
  leaf_name => { "\.htaccess" };
  file_result => "leaf_name";
}

############################################################################

body file_select cfe_internal_exclude_index_html
{
  leaf_name => { "index.html" };
  file_result => "!leaf_name";
}

############################################################################

body file_select cfe_internal_docroot_api_static_perms
{
  leaf_name => { "\.htaccess" };
  file_result => "!leaf_name";
}

############################################################################

body depth_search cfe_internal_docroot_application_perms
{
      depth => "inf";
      exclude_dirs => { "logs" };
}
