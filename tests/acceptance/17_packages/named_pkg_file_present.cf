#######################################################
#
# Test installation of package from local repo
#
#######################################################

body common control
{
    inputs => {   
               "../../../lib/3.6/packages.cf",
               "../../../lib/3.6/paths.cf",
              };
    # bundlesequence  => { "g", "G", default("$(this.promise_filename)") };
    bundlesequence  => { "init", "test", "check" };
    version => "1.0";
}

bundle common g
{
           
    
}

#######################################################

bundle agent init
{
  commands:
    debian::
      "/usr/bin/apt-get purge zip";
    redhat::
      "/usr/bin/yum erase -y zip";
}

#######################################################

bundle agent test
{

    vars:
    
        "name" string => "zip";
        
        debian:: 
            "version" string => "3.0-7";
            
        redhat::
            "version" string => "3.0-1";
            
    packages:
    
        debian::
        
            "$(name)"
            package_policy => "add",
            package_select => "==",
            package_version => "$(version)",
            package_architectures => { "i386", "amd64" },
            package_method => dpkg_version("./repo");
            
        redhat::
        
            "$(name)"
            package_policy => "add",
            package_select => "==",
            package_version => "$(version)",
            package_architectures => { "i386", "x86_64" },
            package_method => dpkg_version("./repo");
              
}



body classes test_set_class(ok_class,notok_class)
{
    promise_kept => { "$(ok_class)" };
    promise_repaired => { "$(ok_class)" };
    repair_failed => { "$(notok_class)" };
}

#######################################################

bundle agent check
{

    classes:
    
        debian::
            "has_pkg" expression => returnszero("/usr/bin/apt-cache policy $(test.name) | /bin/grep -q none", "useshell");

        redhat::
            "has_pkg" not => returnszero("/bin/rpm -qa | grep -qw $(test.name)", "useshell");
            
        any::
            "ok" expression => "pass.!fail.has_pkg";
  
    reports:
      ok::
        "$(this.promise_filename) $(test.name)=$(test.version)  Pass";
      !ok::
        "$(this.promise_filename) FAIL";
}

body classes succesfully_executed(class)
{
    kept_returncodes => { "0" };
    promise_kept => { "$(class)" };
}



