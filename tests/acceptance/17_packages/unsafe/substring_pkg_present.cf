#######################################################
#
# Redmine#2986: A substring of the name of a package shouldn't install it
#
#######################################################

body common control
{
      inputs => {
                  "../../default.cf.sub",
                  "../../../../lib/3.6/packages.cf",
                  "packages-info.cf.sub",
      };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";
      cache_system_functions => "no";
}



#######################################################

bundle agent init
{
  methods:
      "clear_packages" usebundle => clear_packages;
}

#######################################################

bundle agent test
{
  vars:
      "package_name" string => "$(p.name[3])";

  packages:
    debian::

      "$(p.base_name)"
      package_policy => "add",
      package_method => apt_get,
      classes => test_set_class("fail","pass");

    redhat::

      "$(p.base_name)"
      package_policy => "add",
      package_method => yum_rpm,
      classes => test_set_class("fail","pass");
}



body classes test_set_class(ok_class,notok_class)
{
      promise_kept => { "$(ok_class)" };
      promise_repaired => { "$(ok_class)" };
      repair_failed => { "$(notok_class)" };
}

#######################################################

bundle agent check
{

  classes:

    redhat::
      "has_pkg" expression => returnszero("/bin/rpm -q $(test.package_name) > /dev/null", "useshell");

    debian::
      "has_pkg" expression => returnszero("dpkg -l | grep ' $(test.package_name) ' > /dev/null", "useshell");

    any::
      "has_file" expression => fileexists("$(p.file[3][$(p.latest_version)])");
      "ok" expression => "pass.!fail.!has_pkg.!has_file";


  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
