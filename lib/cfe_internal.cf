############################################################################
#  Copyright (C) CFEngine AS
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License LGPL as published by the
#  Free Software Foundation; version 3.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  To the extent this program is licensed as part of the Enterprise
#  versions of CFEngine, the applicable Commercial Open Source License
#  (COSL) may apply to this file if you as a licensee so wish it. See
#  included file COSL.txt.
###########################################################################
#
# CFEngine Community Open Promise-Body Library
#
# This initiative started by CFEngine promotes a
# standardized set of names and promise specifications
# for template functionality within CFEngine 3.
#
# The aim is to promote an industry standard for
# naming of configuration patterns, leading to a
# de facto middleware of standardized syntax.
#
# Names should be intuitive and parameters should be
# minimal to assist readability and comprehensibility.

# Contributions to this file are voluntarily given to
# the cfengine community, and are moderated by CFEngine.
# No liability or warranty for misuse is implied.
#
# If you add to this file, please try to make the
# contributions "self-documenting". Comments made
# after the bundle/body statement are retained in
# the online docs
#

# For CFEngine Core: 3.8.0 to 3.8.x
###################################################
# If you find CFEngine useful, please consider    #
# purchasing a commercial version of the software.#
###################################################

bundle common cfe_internal_common
# @brief Select parts of the standard library that are dependant
{
  vars:
      "inputs" slist => { "$(this.promise_dirname)/common.cf",
                          "$(this.promise_dirname)/commands.cf"};
}

body file control
# @brief Include necessary parts of stdlib
{
      inputs => { @(cfe_internal_common.inputs) };
}

bundle agent cfe_internal_cleanup_agent_reports
# @brief Cleanup accumulated agent reports
{
  vars:
    any::
      # To avoid unnecessary work, we only findfiles if there is not already a
      # variable defined.
      "diff_files"
        slist => findfiles("$(sys.workdir)/state/diff/*.diff"),
        unless => isvariable( $(this.promiser) );

      "promise_log_files"
        slist => findfiles("$(sys.workdir)/state/promise_log/*.csv"),
        unless => isvariable( $(this.promiser) );

      "files" slist => { @(diff_files), @(promise_log_files) };

      "reports_size[$(files)]"
        int => filesize("$(files)"),
        unless => isvariable( $(this.promiser) );

      "tmpmap"
        slist => maparray("$(this.v)", reports_size);

    # We need to make sure that we have files before summing or errors are
    # produced in the log
    have_files::
      "total_report_size" real => sum(tmpmap);

  classes:
      "cfe_internal_purge_reports"
        expression => isgreaterthan("$(total_report_size)","$(def.max_client_history_size)"),
        comment => "Determine if the current sum of reports exceeds the max desired";

      "have_files"
        expression => isgreaterthan(length(tmpmap), 0);

  files:
    cfe_internal_purge_reports::
      "$(files)"
        delete => tidy,
        handle => "cf_cleanup_agent_reports_$(files)";

  reports:
    DEBUG|DEBUG_cfe_internal_cleanup_agent_reports::
      "DEBUG $(this.bundle): Size of '$(files)' =  '$(reports_size[$(files)])'";
      "DEBUG $(this.bundle): Size of all reports = '$(total_report_size)'";
      "DEBUG $(this.bundle): Purge threshold = '$(def.max_client_history_size)'";
      "DEBUG $(this.bundle): Client history purge triggered"
        ifvarclass => "cfe_internal_purge_reports";

}
