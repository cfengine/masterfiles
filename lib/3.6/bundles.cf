############################################################################
#  Copyright (C) CFEngine AS
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License LGPL as published by the
#  Free Software Foundation; version 3.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  To the extent this program is licensed as part of the Enterprise
#  versions of CFEngine, the applicable Commercial Open Source License
#  (COSL) may apply to this file if you as a licensee so wish it. See
#  included file COSL.txt.
###########################################################################
#
# CFEngine Community Open Promise-Body Library
#
# This initiative started by CFEngine promotes a
# standardized set of names and promise specifications
# for template functionality within CFEngine 3.
#
# The aim is to promote an industry standard for
# naming of configuration patterns, leading to a
# de facto middleware of standardized syntax.
#
# Names should be intuitive and parameters should be
# minimal to assist readability and comprehensibility.

# Contributions to this file are voluntarily given to
# the cfengine community, and are moderated by CFEngine.
# No liability or warranty for misuse is implied.
#
# If you add to this file, please try to make the
# contributions "self-documenting". Comments made
# after the bundle/body statement are retained in
# the online docs
#

# For CFEngine Core: 3.6.0 to 3.6.x
# Bundles

###################################################
# If you find CFEngine useful, please consider    #
# purchasing a commercial version of the software.#
###################################################

bundle common bundles_common
# @ignore
{
  vars:
      "inputs" slist => { "$(this.promise_dirname)/files.cf" };
}

body file control
# @ignore
{
      inputs => { @(bundles_common.inputs) };
}

###################################################
# agent bundles
###################################################

bundle agent cronjob(commands,user,hours,mins)
# @brief Defines a cron job for `user`
#
# Adds a line to crontab, if necessary.
#
# @param commands The commands that should be run
# @param user The owner of crontab
# @param hours The hours at which the job should run
# @param mins The minutes at which the job should run
#
# **Example:**
#
# ```cf3
# methods:
#  "cron" usebundle => cronjob("/bin/ls","mark","*","5,10");
# ```
{
  vars:
    SuSE::
      "crontab" string => "/var/spool/cron/tabs";
    redhat|fedora::
      "crontab" string => "/var/spool/cron";
    freebsd::
      "crontab" string => "/var/cron/tabs";
    !(SuSE|redhat|fedora|freebsd)::
      "crontab" string => "/var/spool/cron/crontabs";

  files:

    !windows::
      "$(crontab)/$(user)"

      comment => "A user's regular batch jobs are added to this file",
      create => "true",
      edit_line => append_if_no_line("$(mins) $(hours) * * * $(commands)"),
      perms => mo("600","$(user)"),
      classes => if_repaired("changed_crontab");

  processes:

    changed_crontab::
      "cron"
      comment => "Most crons need to be huped after file changes",
      signals => { "hup" };

}

bundle agent rm_rf(name)
# @brief recursively remove `name` to any depth, including base
# @depends rm_rf_depth
# @param name the file or directory name
#
# This bundle will remove `name` to any depth, including `name` itself.
#
# **Example:**
#
# ```cf3
# methods:
#     "bye" usebundle => rm_rf("/var/tmp/oldstuff");
# ```
{
  methods:
      "rm" usebundle => rm_rf_depth($(name),"inf");

}

bundle agent rm_rf_depth(name,depth)
# @brief recursively remove `name` to depth `depth`, including base
# @depends recurse_with_base tidy all
# @param name the file or directory name
# @param depth how far to descend
#
# This bundle will remove `name` to depth `depth`, including `name` itself.
#
# **Example:**
#
# ```cf3
# methods:
#     "bye" usebundle => rm_rf_depth("/var/tmp/oldstuff", "100");
# ```
{
  classes:
      "isdir" expression => isdir($(name));
  files:
    isdir::
      "$(name)"
      file_select => all,
      depth_search => recurse_with_base($(depth)),
      delete => tidy;

    !isdir::
      "$(name)" delete => tidy;
}

bundle agent fileinfo(f)
# @brief provide access to file stat fields from the bundle caller and report
# file stat info for file "f" if "verbose_mode" class is defined
# @param f file or files to stat
#
# **Example:**
#
# ```cf3
# bundle agent example
# {
#   vars:
#     "files" slist => { "/tmp/example1", "/tmp/example2" };
#
#   files:
#     "$(files)"
#       create => "true",
#       classes => if_ok("verbose_mode"),
#       comment => "verbose_mode is defined because the fileinfo bundle restricts the report of the file info to verbose mode";
#
#     "/tmp/example3"
#       create => "true",
#       classes => if_ok("verbose_mode"),
#       comment => "verbose_mode is defined because the fileinfo bundle restricts the report of the file info to verbose mode";
#
#
#   methods:
#     "fileinfo" usebundle => fileinfo( @(files) );
#     "fileinfo" usebundle => fileinfo( "/tmp/example3" );
#
#   reports:
#     "$(this.bundle): $(files): $(fileinfo.fields) = '$(fileinfo.stat[$(files)][$(fileinfo.fields)])'";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][size])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][gid])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][uid])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][ino])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][nlink])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][ctime])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][atime])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][mtime])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][mode])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][modeoct])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][permstr])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][permoct])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][type])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][devno])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][dev_minor])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][dev_major])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][basename])";
#     "$(this.bundle): $(fileinfo.stat[/tmp/example3][dirname])";
# }
# ```
{
  vars:
      "fields" slist => splitstring("size,gid,uid,ino,nlink,ctime,atime,mtime,mode,modeoct,permstr,permoct,type,devno,dev_minor,dev_major,basename,dirname,linktarget,linktarget_shallow", ",", 999);

      "stat[$(f)][$(fields)]" string => filestat($(f), $(fields));

  reports:
    verbose_mode::
      "$(this.bundle): file $(f) has $(fields) = $(stat[$(f)][$(fields)])";
}

bundle agent logrotate(log_files, max_size, rotate_levels)
# @brief rotate specified "log_files" larger than "max_size". Keep
# "rotate_levels" versions of the files before overwriting the oldest one
# @depends rotate
# @depends bigger_than
# @param log_files single file or list of files to evaluate for rotation
# @param max_size minimum size in bytes that the file will grow to before being rotated
# @param rotate_levels number of rotations to keep before overwriting the oldest one
#
# **Example:**
#
# ```cf3
# bundle agent example
# {
#   vars:
#     "logdirs" slist => { "/var/log/syslog", "/var/log/maillog"};
#
#   methods:
#     "logrotate" usebundle => logrotate( @(logdirs), "1M", "2" );
#     "logrotate" usebundle => logrotate( "/var/log/mylog, "1", "5" );
#     "logrotate" usebundle => logrotate( "/var/log/alog, "500k", "7" );
# }
# ```
{
  files:
      "$(log_files)"
      comment     => "Rotate file if above specified size",
      rename      => rotate("$(rotate_levels)"),
      file_select => bigger_than("$(max_size)");
}

bundle agent probabilistic_usebundle(probability, bundlename)
# @brief activate named bundle probabilistically
# @param probability probability that the named bundle will be activated during
# a given agent execution
# @param bundlename the bundle to activate based on the probability
#
# **Example:**
#
# ```cf3
# bundle agent example
# {
#    methods:
#      "Toss Coin"
#        usebundle => probabilistic_usebundle("50", "heads"),
#        comment => "Call bundle heads ~ 50% of the time";
#
#      "Trick Coin"
#        usebundle => probabilistic_usebundle("75", "heads"),
#        comment => "Call bundle heads ~ 75% of the time";
# }
# ```
{
  classes:
    "fifty_fifty"
      expression => strcmp("$(probability)", "50"),
      comment => "We have to special case 50 because of the way dist classes
                  work you would always get 50 defined";
    "not_fifty_fifty" expression => "!fifty_fifty";
    "have_remainder" expression => isvariable("remainder");

    fifty_fifty.have_remainder::
      "activate_bundle"
        dist => { "$(probability)000", "$(remainder)"};

    not_fifty_fifty.have_remainder::
      "activate_bundle"
        dist => { "$(probability)", "$(remainder)"};

  vars:
    fifty_fifty::
      "remainder"
        string => format("%d", eval("((100 - $(probability)) * 1000) +1", "math", "infix"));

    not_fifty_fifty::
      "remainder"
        string => format("%d", eval("100 - $(probability)", "math", "infix"));

  methods:
    fifty_fifty::
      "Activate bundle probabilistically"
        handle => "probabilistic_usebundle_methods_special_case_fifty_fifty_activate_bundle",
        usebundle => $(bundlename),
        ifvarclass => "activate_bundle_$(probability)000",
        comment => "Activate $(bundlename) $(probability)%ish of the time";

    not_fifty_fifty::
      "Activate bundle probabilistically"
        handle => "probabilistic_usebundle_methods_activate_bundle",
        usebundle => $(bundlename),
        ifvarclass => "activate_bundle_$(probability)",
        comment => "Activate $(bundlename) $(probability)% of the time";


  reports:
    DEBUG.fifty_fifty::
      "$(this.bundle) Special case for 50/50";

      "$(this.bundle) activate_bundle_$(probability)000"
        ifvarclass => "activate_bundle_$(probability)000";

      "$(this.bundle) activate_bundle_$(probability)001"
        ifvarclass => "activate_bundle_$(probability)001";
}

bundle agent prunedir(dir, max_days)
# @brief delete plain files inside "dir" older than "max_days" (not recursively).
# @depends tidy
# @depends recurse
# @depends filetype_older_than
# @param dir directory to examine for files
# @param max_days maximum number of days old a files mtime is allowed to before deletion
#
# **Example:**
#
# ```cf3
# bundle agent example
# {
#   vars:
#     "dirs" slist => { "/tmp/logs", "/tmp/logs2" };
#
#   methods:
#     "prunedir" usebundle => prunedir( @(dirs), "1" );
# }
# ```
{
  files:
      "$(dir)"
      comment       => "Delete plain files inside directory older than max_days",
      delete        => tidy,
      file_select   => filetype_older_than("plain", "$(max_days)"),
      depth_search  => recurse("1");
}

bundle agent tcdb_fix
# @brief Optimize tcdb and repair tcdb corruption
#
# **Example**:
# ```cf3
# methods:
#   "Manage Tokyo Cabinet Corruption"
#     usebundle => tcdb_fix,
#     handle => "main_methods_tcdb_fix",
#     comment => "Optimize/Repair or regenerate corrupt tcdb files";
# ```
# This bundle works around corruption issues with Tokyo Cabinet database files
# in CFEngine 3.5. Find all tcdb files in $(sys.workdir) and run tchmgr
# optimize on them. If any invalid record headers are found we remove the
# affected database so that it can be re-created. This occurs hourly based on
# `splayclass` and assumes a 5 minute agent execution interval.
{
  vars:

    linux::
      "db" slist => splitstring( execresult("/usr/bin/find $(sys.workdir) -name '*.tcdb' 2>/dev/null", "useshell"), "\n", "1000");


  classes:

      # NOTE: assumes that CFEngine is set to run every 5 minutes
      "hourly_class" expression => splayclass("$(sys.host)$(sys.ipv4)", "hourly");

    hourly_class.linux::
      "detected_invalid_record_$(db)" expression => returnszero("/var/cfengine/bin/tchmgr optimize $(db) 2>&1 | grep -q 'invalid record header'", "useshell");


  commands:

      "$(paths.rm)"
        args => "-f $(db)",
        ifvarclass => canonify("detected_invalid_record_$(db)"),
        classes => scoped_classes_generic("bundle", "absent_$(db)"),
        handle => "fix_tcdb_commands_detected_invalid_record_rm_$(db)",
        comment => "Invalid record headers indicate that the database corruption is beyond repair. It will be automatically re-created.";


  reports:

      "$(this.bundle) $(sys.fqhost): Detected invalid record header in $(db) - tried to repair"
        ifvarclass => canonify("detected_invalid_record_$(db)");

      "$(this.bundle) $(sys.fqhost): Repair failed, removed corrupt database: $(db)"
        ifvarclass => canonify("absent_$(db)_repaired");
}

bundle agent url_ping(host, method, port, uri)
# @brief ping HOST:PORT/URI using METHOD
# @param host the host name
# @param method the HTTP method (HEAD or GET)
# @param port the port number, e.g. 80
# @param uri the URI, e.g. /path/to/resource
#
# This bundle will send a simple HTTP request and read 20 bytes back,
# then compare them to `200 OK.*` (ignoring leading spaces).
#
# If the data matches, the global class "url_ok_HOST" will be set, where
# HOST is the canonified host name, i.e. `canonify($(host))`
#
# **Example:**
#
# ```cf3
# methods:
#     "check" usebundle => url_ping("cfengine.com", "HEAD", "80", "/bill/was/here");
# reports:
#   url_ok_cfengine_com::
#     "CFEngine's web site is up";
#   url_not_ok_cfengine_com::
#     "CFEngine's web site *may* be down.  Or you're offline.";
# ```
{
  vars:
      "url_check" string => readtcp($(host),
                                    $(port),
                                    "$(method) $(uri) HTTP/1.1$(const.r)$(const.n)Host:$(host)$(const.r)$(const.n)$(const.r)$(const.n)",
                                    20);

      "chost" string => canonify($(host));

  classes:
      "url_ok_$(chost)"
      scope => "namespace",
      expression => regcmp("[^\n]*200 OK.*\n.*",
                           $(url_check));

      "url_not_ok_$(chost)"
      scope => "namespace",
      not => regcmp("[^\n]*200 OK.*\n.*",
                           $(url_check));

  reports:
    verbose_mode::
      "$(this.bundle): $(method) $(host):$(port)/$(uri) got 200 OK"
      ifvarclass => "url_ok_$(chost)";
      "$(this.bundle): $(method) $(host):$(port)/$(uri) did *not* get 200 OK"
      ifvarclass => "url_not_ok_$(chost)";
}

bundle agent git_init(repo_path)
# @brief initializes a new git repository if it does not already exist
# @depends git
# @param repo_path absolute path of where to initialize a git repository
#
# **Example:**
#
# ```cf3
# bundle agent my_git_repositories
# {
#   vars:
#     "basedir"  string => "/var/git";
#     "repos"    slist  => { "myrepo", "myproject", "myPlugForMoreHaskell" };
#
#   files:
#     "$(basedir)/$(repos)/."
#       create => "true";
#
#   methods:
#     "git_init" usebundle => git_init("$(basedir)/$(repos)");
# }
# ```
{
  classes:
    "ok_norepo" not => fileexists("$(repo_path)/.git");

  methods:
    ok_norepo::
      "git_init"  usebundle => git("$(repo_path)", "init", "");
}

bundle agent git_add(repo_path, file)
# @brief adds files to the supplied repository's index
# @depends git
# @param repo_path absolute path to a git repository
# @param file a file to stage in the index
#
# **Example:**
#
# ```cf3
# bundle agent add_files_to_git_index
# {
#   vars:
#     "repo"  string => "/var/git/myrepo";
#     "files" slist  => { "fileA", "fileB", "fileC" };
#
#   methods:
#     "git_add" usebundle => git_add("$(repo)", "$(files)");
# }
# ```
{
  classes:
    "ok_repo" expression => fileexists("$(repo_path)/.git");

  methods:
    ok_repo::
      "git_add" usebundle => git("$(repo_path)", "add", "$(file)");
}

bundle agent git_checkout(repo_path, branch)
# @brief checks out an existing branch in the supplied git repository
# @depends git
# @param repo_path absolute path to a git repository
# @param branch the name of an existing git branch to checkout
#
# **Example:**
#
# ```cf3
# bundle agent git_checkout_some_existing_branch
# {
#   vars:
#     "repo"   string => "/var/git/myrepo";
#     "branch" string => "dev/some-topic-branch";
#
#   methods:
#     "git_checkout" usebundle => git_checkout("$(repo)", "$(branch)");
# }
# ```
{
  classes:
    "ok_repo" expression => fileexists("$(repo_path)/.git");

  methods:
    ok_repo::
      "git_checkout" usebundle => git("$(repo_path)", "checkout", "$(branch)");
}

bundle agent git_checkout_new_branch(repo_path, new_branch)
# @brief checks out and creates a new branch in the supplied git repository
# @depends git
# @param repo_path absolute path to a git repository
# @param new_branch the name of the git branch to create and checkout
#
# **Example:**
#
# ```cf3
# bundle agent git_checkout_new_branches
# {
#   vars:
#     "repo[myrepo]"    string => "/var/git/myrepo";
#     "branch[myrepo]"  string => "dev/some-new-topic-branch";
#
#     "repo[myproject]"   string => "/var/git/myproject";
#     "branch[myproject]" string => "dev/another-new-topic-branch";
#
#     "repo_names"        slist => getindices("repo");
#
#   methods:
#     "git_checkout_new_branch" usebundle => git_checkout_new_branch("$(repo[$(repo_names)])", "$(branch[$(repo_names)])");
# }
# ```
{
  classes:
    "ok_repo" expression => fileexists("$(repo_path)/.git");

  methods:
    ok_repo::
      "git_checkout" usebundle => git("$(repo_path)", "checkout -b", "$(branch)");
}

bundle agent git_commit(repo_path, message)
# @brief executes a commit to the specificed git repository
# @depends git
# @param repo_path absolute path to a git repository
# @param message the message to associate to the commmit
#
# **Example:**
#
# ```cf3
# bundle agent make_git_commit
# {
#   vars:
#     "repo"  string => "/var/git/myrepo";
#     "msg"   string => "dituri added some bundles for common git operations";
#
#   methods:
#     "git_commit" usebundle => git_commit("$(repo)", "$(msg)");
# }
# ```
{
  classes:
    "ok_repo" expression => fileexists("$(repo_path)/.git");

  methods:
    ok_repo::
      "git_commit" usebundle => git("$(repo_path)", "commit", '-m "$(message)"');
}

bundle agent git(repo_path, subcmd, args)
# @brief generic interface to git
# @param repo_path absolute path to a new or existing git repository
# @param subcmd any valid git sub-command
# @param args a single string of arguments to pass
#
# **Example:**
#
# ```cf3
# bundle agent git_rm_files_from_staging
# {
#   vars:
#     "repo"        string => "/var/git/myrepo";
#     "git_cmd"     string => "reset --soft";
#     "files"       slist  => { "fileA", "fileB", "fileC" };
#
#   methods:
#     "git_reset" usebundle => git("$(repo)", "$(git_cmd)", "HEAD -- $(files)");
# }
# ```
{
  commands:
    "$(paths.path[git])"
      args => "$(subcmd) $(args)",
      contain => in_dir("$(repo_path)");
}

bundle agent cmerge(varlist)
# @brief bundle to merge many data containers into one
# @param varlist a list of variable names (**MUST** be a list)
#
# The result will be in `cmerge.all`.  You can also use
# `cmerge.all_str` for a string version of the merged containers.
#
# If you merge a key-value map into an array or vice versa, the map
# always wins.  So this example will result in a key-value map even
# though `cmerge.all` starts as an array.
#
# **Example:**
#
# ```cf3
# bundle agent run
# {
#   vars:
#       # the "mymerge" tag is user-defined
#       "a"       data  => parsejson('{ "a": "1" }'), meta => { "mymerge" };
#       "b"       data  => parsejson('{ "b": "2" }'), meta => { "mymerge" };
#       "c"       data  => parsejson('{ "c": "3" }'), meta => { "mymerge" };
#       "d"       data  => parsejson('{ "d": "4" }'), meta => { "mymerge" };
#
#       # you can list them explicitly: "default:run.a" through "default:run.d"
#       "todo"    slist => variablesmatching(".*", "mymerge");
#
#       # you can use cmerge.all_str, but this is how you access the result
#       "merged_str" string => format("%S", "cmerge.all");
#
#   methods:
#       "go" usebundle => cmerge(@(todo)); # a, b, c, d
#
#   reports:
#       "merged = $(cmerge.all_str)";
# }
# ```
{
  vars:
      "all" data => parsejson('[]'),            policy => "free";
      "all" data => mergedata(all, $(varlist)), policy => "free"; # iterates!
      "all_str" string => format("%S", all),    policy => "free";
}
