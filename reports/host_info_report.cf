bundle agent host_info_report
# @brief Generates a short high level summary of the executing host information
#
# **Example:**
# `cf-agent -b host_info_report`
{
  vars:
    "host_info_report_template"
      string => "$(this.promise_dirname)/../templates/$(this.bundle).mustache",
      comment => "Where the report template is found";

    "host_info_report_txt"
      string => "$(sys.workdir)/reports/$(this.bundle).txt",
      comment => "Where the host info report should be generated";

    "installed_packages"
      data => packagesmatching(".*", ".*", ".*", ".*");

    "cf_promises_validated"
      data => readjson("$(sys.masterdir)/cf_promises_validated", 1K);

    "cf_promises_validated_timestamp"
      string => "$(cf_promises_validated[timestamp])";

    "cf_promises_validated_timestamp_formatted"
      string => strftime("localtime", "%F %T %Z", $(cf_promises_validated_timestamp)),
      comment => "It's useful to know when policy was last updated and verified";

    "last_agent_run"
      string => strftime("localtime", "%F %T %Z", filestat("$(sys.workdir)/outputs/previous", "mtime"));

    "cf_promises_release_id"
      data => readjson("$(sys.inputdir)/cf_promises_release_id", 1K);

    "cf_promises_release_id_releaseId"
      string => "$(cf_promises_release_id[releaseId])";
    "printable"
      string => format("%S", cf_promises_release_id);

  files:
    "$(host_info_report_txt)"
      create => "true",
      edit_template => "$(host_info_report_template)",
      handle => "host_info_report_files_host_info_report_txt",
      classes => scoped_classes_generic("bundle", "host_info_report_txt"),
      template_method => "mustache";

  reports:
    host_info_report_txt_repaired::
      "Host info report generated and avilable at '$(host_info_report_txt)'";

    host_info_report_txt_not_ok::
      "There was a problem generating your host info report at '$(host_info_report_txt)'";
}
